import { NextRequest, NextResponse } from "next/server"
import { supabaseAdmin } from "@/lib/supabase/admin"

export async function GET(request: NextRequest) {
  try {
    const email = request.nextUrl.searchParams.get('email') || 'dev@planetenglish.ru'
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${email} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ profiles
    const { data: profileData, error: profileError } = await supabaseAdmin
      .from('profiles')
      .select('*')
      .eq('email', email)
      .single()

    const result = {
      email,
      timestamp: new Date().toISOString(),
      profile: {
        found: !profileError,
        error: profileError?.message || null,
        data: profileData || null
      }
    }

    if (profileError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ profiles: ${profileError.message}`)
    } else if (profileData) {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ profiles:`)
      console.log(`   - user_id: ${profileData.user_id}`)
      console.log(`   - email: ${profileData.email}`)
      console.log(`   - full_name: ${profileData.full_name}`)
      console.log(`   - role: ${profileData.role}`)
      console.log(`   - branch_id: ${profileData.branch_id}`)
      console.log(`   - category: ${profileData.category}`)
    } else {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ profiles`)
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ—Ö–æ–∂–∏–º email
    const { data: allProfiles, error: allError } = await supabaseAdmin
      .from('profiles')
      .select('email, role, full_name')
      .ilike('email', '%dev%')

    result.similarUsers = {
      found: !allError,
      error: allError?.message || null,
      data: allProfiles || []
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    const { data: adminUsers, error: adminError } = await supabaseAdmin
      .from('profiles')
      .select('email, full_name, role')
      .eq('role', 'Administrator')

    result.administrators = {
      found: !adminError,
      error: adminError?.message || null,
      data: adminUsers || []
    }

    return NextResponse.json(result, { status: 200 })

  } catch (error: any) {
    console.error("üí• –û—à–∏–±–∫–∞ API:", error)
    return NextResponse.json({
      error: error.message,
      timestamp: new Date().toISOString()
    }, { status: 500 })
  }
}
