import { NextResponse } from "next/server"
import { PyrusUsersClient } from "@/lib/pyrus/client"

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Pyrus API
 * –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * 
 * GET /api/debug/pyrus-test
 */
export async function GET() {
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pyrus API...')
    
    const pyrusClient = new PyrusUsersClient()
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    const allMembers = await pyrusClient.getMembers()
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${allMembers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Pyrus`)
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const activeMembers = await pyrusClient.getActiveMembers()
    console.log(`‚úÖ –ò–∑ –Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${activeMembers.length}`)
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    const sampleUser = activeMembers[0]
    console.log('üìã –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', sampleUser)
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏
    const uniqueRoles = [...new Set(activeMembers.map(user => user.role).filter(Boolean))]
    console.log('üé≠ –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏ –≤ Pyrus:', uniqueRoles)
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã/—Ñ–∏–ª–∏–∞–ª—ã
    const departmentInfo = activeMembers.map(user => ({
      dept_id: user.department_id,
      dept_name: user.department_name
    })).filter(dept => dept.dept_id || dept.dept_name)
    
    const uniqueDepartments = departmentInfo.reduce((acc, dept) => {
      const key = `${dept.dept_id}_${dept.dept_name}`
      if (!acc.some(d => `${d.dept_id}_${d.dept_name}` === key)) {
        acc.push(dept)
      }
      return acc
    }, [] as typeof departmentInfo)
    
    console.log('üè¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã:', uniqueDepartments)
    
    return NextResponse.json({
      success: true,
      statistics: {
        totalUsers: allMembers.length,
        activeUsers: activeMembers.length,
        bannedUsers: allMembers.length - activeMembers.length,
      },
      roles: uniqueRoles,
      departments: uniqueDepartments,
      sampleUser: sampleUser ? {
        id: sampleUser.id,
        email: sampleUser.email,
        first_name: sampleUser.first_name,
        last_name: sampleUser.last_name,
        role: sampleUser.role,
        department_id: sampleUser.department_id,
        department_name: sampleUser.department_name,
        banned: sampleUser.banned,
      } : null,
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      sampleUsers: activeMembers.slice(0, 5).map(user => ({
        id: user.id,
        email: user.email,
        name: `${user.first_name} ${user.last_name}`.trim(),
        role: user.role,
        department: user.department_name,
        banned: user.banned,
      }))
    })

  } catch (error: unknown) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Pyrus API:', error)
    return NextResponse.json({
      success: false,
      error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      details: process.env.NODE_ENV === 'development' ? error.stack : undefined
    }, { status: 500 })
  }
}
