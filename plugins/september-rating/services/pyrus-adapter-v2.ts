/**
 * –ù–û–í–´–ô –ê–¥–∞–ø—Ç–µ—Ä –ø–ª–∞–≥–∏–Ω–∞ September Rating –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Pyrus
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –Ω–∞–¥–µ–∂–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
 * –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ –∏–∑ final_fixed_report.md
 */

import { PyrusClientFactory } from "@/lib/pyrus/client-factory"
import { PyrusSyncServiceV2 } from "@/lib/services/pyrus-sync-service-v2"
import { SeptemberRatingSyncStatusService } from "@/lib/services/september-rating-sync-status"
import { pyrusDebugLogger } from "@/lib/pyrus/core/debug-logger"
import type { SyncResult, SyncablePlugin } from "../../core/plugin-types"
import type { DetailedSyncStatus } from "@/lib/types/september-rating"

/**
 * –ù–û–í–´–ô –ê–¥–∞–ø—Ç–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
export class SeptemberRatingPyrusAdapterV2 implements SyncablePlugin {
  private syncService: PyrusSyncServiceV2
  private statusService: SeptemberRatingSyncStatusService

  constructor() {
    const formsClient = PyrusClientFactory.createFormsClient()
    const teachersClient = PyrusClientFactory.createTeachersClientV2()
    this.syncService = new PyrusSyncServiceV2(formsClient, teachersClient)
    this.statusService = new SeptemberRatingSyncStatusService()
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö September Rating
   * –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ª–æ–≥–∏–∫–∏ –∏–∑ Python
   */
  async sync(): Promise<SyncResult> {
    const startedAt = new Date()
    const errors: string[] = []
    const warnings: string[] = []

    try {
      console.log('üîÑ Starting September Rating sync with new architecture')

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
      const result = await this.syncService.syncAllForms()

      const completedAt = new Date()

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç SyncResult
      const syncResult: SyncResult = {
        success: result.success,
        recordsProcessed: result.teachersProcessed,
        recordsUpdated: result.teachersProcessed, // –ü–æ–∫–∞ —Å—á–∏—Ç–∞–µ–º —Ä–∞–≤–Ω—ã–º–∏
        startedAt,
        completedAt,
        errors: result.errors.length > 0 ? result.errors : undefined,
        warnings: warnings.length > 0 ? warnings : undefined
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      try {
        await this.statusService.saveSyncResult(syncResult)
      } catch (dbError) {
        console.warn('‚ö†Ô∏è Failed to save sync result to database:', dbError)
      }

      // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      pyrusDebugLogger.printFinalSummary()

      console.log(`${syncResult.success ? '‚úÖ' : '‚ùå'} September Rating sync completed:`, {
        success: syncResult.success,
        recordsProcessed: syncResult.recordsProcessed,
        recordsUpdated: syncResult.recordsUpdated,
        duration: `${result.duration}ms`,
        errors: result.errors.length,
        warnings: warnings.length
      })

      return syncResult

    } catch (error) {
      const completedAt = new Date()
      const errorMsg = error instanceof Error ? error.message : 'Unknown sync error'
      
      console.error('üí• September Rating sync failed:', errorMsg)
      
      return {
        success: false,
        recordsProcessed: 0,
        recordsUpdated: 0,
        startedAt,
        completedAt,
        errors: [errorMsg, ...errors]
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async getSyncStatus(): Promise<DetailedSyncStatus> {
    return await this.statusService.getDetailedSyncStatus()
  }
}
