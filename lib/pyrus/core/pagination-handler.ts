/**
 * Keyset –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º Pyrus API v4
 * 
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Pyrus API:
 * https://pyrus.com/en/help/api
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç keyset pagination —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
 * - `task_id<{last_task_id}` - —Ñ–∏–ª—å—Ç—Ä –∑–∞–¥–∞—á —Å ID –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
 * - `sort=id` - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ID (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
 * - `item_count` - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–¥–æ 20000)
 * 
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞: –∫–æ–≥–¥–∞ –≤–µ—Ä–Ω—É–ª–æ—Å—å –∑–∞–¥–∞—á –º–µ–Ω—å—à–µ, —á–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–æ –≤ item_count.
 * 
 * –õ–∏–º–∏—Ç—ã:
 * - –î–æ 20000 –∑–∞–¥–∞—á –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
 * - –î–æ 5000 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 10 –º–∏–Ω—É—Ç
 */

import { PyrusBaseClient } from '../base-client'
import { PyrusTask } from '../forms-client'
import { pyrusDebugLogger } from './debug-logger'

export interface PaginationOptions {
  includeArchived?: boolean
  maxTasks?: number
  batchSize?: number
  logProgress?: boolean
}

interface PyrusTasksResponse {
  tasks: PyrusTask[]
  // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Pyrus API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è keyset pagination —á–µ—Ä–µ–∑ ID –∑–∞–¥–∞—á
}

export class PyrusPaginationHandler {
  private client: PyrusBaseClient

  constructor(client: PyrusBaseClient) {
    this.client = client
  }

  /**
   * –ò—Ç–µ—Ä–∞—Ç–æ—Ä –ø–æ –∑–∞–¥–∞—á–∞–º —Ñ–æ—Ä–º—ã —Å KEYSET –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Pyrus API v4
   * https://pyrus.com/en/help/api
   */
  async *iterateAllTasks(
    formId: number,
    options: PaginationOptions = {}
  ): AsyncGenerator<PyrusTask, void, unknown> {
    const {
      includeArchived = false,
      maxTasks = Infinity,
      batchSize = 200, // –ú–æ–∂–Ω–æ –¥–æ 20000, –Ω–æ –Ω–∞—á–Ω—ë–º —Å 200
      logProgress = true
    } = options

    let processedTasks = 0
    let pageNumber = 0
    let lastTaskId: number | null = null // ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏ –¥–ª—è keyset –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö ID –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const seenTaskIds = new Set<number>()

    if (logProgress) {
      console.log(`üìÑ PyrusPaginationHandler: –Ω–∞—á–∏–Ω–∞–µ–º keyset –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ñ–æ—Ä–º—ã ${formId}`)
      pyrusDebugLogger.incrementGlobal(`form_${formId}_iterations_started`)
    }

    // –¶–∏–∫–ª –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    while (processedTasks < maxTasks) {
      pageNumber++
      
      try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        const params = new URLSearchParams({
          item_count: Math.min(batchSize, maxTasks - processedTasks).toString(),
          include_archived: includeArchived ? 'y' : 'n',
          sort: 'id' // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ID (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        })

        // –§–æ—Ä–º–∏—Ä—É–µ–º endpoint —Å keyset —Ñ–∏–ª—å—Ç—Ä–æ–º
        // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Å–∏–º–≤–æ–ª < –Ω—É–∂–Ω–æ URL-encode –≤ %3C
        let endpoint = `forms/${formId}/register?${params.toString()}`
        
        if (lastTaskId !== null) {
          endpoint += `&task_id%3C${lastTaskId}` // task_id< (< –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ %3C)
        }
        
        if (logProgress) {
          const idFilter = lastTaskId !== null ? ` (id < ${lastTaskId})` : ' (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞)'
          console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber}${idFilter}`)
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º timeout (60 —Å–µ–∫ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü)
        const response = await this.client.get<PyrusTasksResponse>(endpoint, {
          timeout: 60000
        })

        if (!response) {
          console.error(`‚ùå PyrusPaginationHandler: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º—ã ${formId}`)
          break
        }

        const { tasks = [] } = response
        const tasksReceived = tasks.length

        if (logProgress) {
          console.log(`  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${tasksReceived} –∑–∞–¥–∞—á`)
        }

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        if (tasksReceived === 0) {
          if (logProgress) {
            console.log(`üèÅ PyrusPaginationHandler: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º`)
          }
          break
        }

        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –æ–±–Ω–æ–≤–ª—è–µ–º –ü–ï–†–ï–î —Ü–∏–∫–ª–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (tasks.length > 0) {
          lastTaskId = tasks[tasks.length - 1].id
        }

        // –û—Ç–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –æ–¥–Ω–æ–π
        for (const task of tasks) {
          if (processedTasks >= maxTasks) {
            break
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
          if (seenTaskIds.has(task.id)) {
            if (logProgress) {
              console.warn(`‚ö†Ô∏è  PyrusPaginationHandler: –ø—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞ task_id=${task.id}`)
            }
            pyrusDebugLogger.incrementGlobal(`form_${formId}_duplicates_skipped`)
            continue
          }
          
          seenTaskIds.add(task.id)
          yield task
          processedTasks++
          
          pyrusDebugLogger.incrementGlobal(`form_${formId}_tasks_yielded`)
        }

        // KEYSET –ü–ê–ì–ò–ù–ê–¶–ò–Ø: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ, —á–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏
        if (tasksReceived < batchSize) {
          if (logProgress) {
            console.log(`üèÅ PyrusPaginationHandler: –ø–æ–ª—É—á–µ–Ω–æ ${tasksReceived} < ${batchSize}, –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å`)
          }
          break
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        if (processedTasks >= maxTasks) {
          if (logProgress) {
            console.log(`üèÅ PyrusPaginationHandler: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç maxTasks=${maxTasks}, –∑–∞–≤–µ—Ä—à–∞–µ–º`)
          }
          break
        }

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 500 –∑–∞–¥–∞—á
        if (logProgress && processedTasks % 500 === 0) {
          console.log(`üìä PyrusPaginationHandler: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedTasks} –∑–∞–¥–∞—á —Ñ–æ—Ä–º—ã ${formId}`)
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç rate limiting)
        await new Promise(resolve => setTimeout(resolve, 100))

      } catch (error) {
        console.error(`‚ùå PyrusPaginationHandler: –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNumber} —Ñ–æ—Ä–º—ã ${formId}:`, error)
        pyrusDebugLogger.incrementGlobal(`form_${formId}_pagination_errors`)
        
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        await new Promise(resolve => setTimeout(resolve, 5000))
        continue
      }
    }

    if (logProgress) {
      console.log(`\nüèÅ PyrusPaginationHandler: keyset –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞`)
      console.log(`  üìä –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${pageNumber}`)
      console.log(`  üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: ${processedTasks}`)
      console.log(`  üîç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á: ${seenTaskIds.size}`)
      pyrusDebugLogger.incrementGlobal(`form_${formId}_total_processed`, processedTasks)
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ
   */
  async getFormStats(formId: number): Promise<{
    totalTasks: number
    archivedTasks: number
    activeTasks: number
  } | null> {
    try {
      console.log(`PyrusPaginationHandler: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—ã ${formId}`)
      
      let totalTasks = 0
      let archivedTasks = 0

      // –°—á–∏—Ç–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤–∫–ª—é—á–∞—è –∞—Ä—Ö–∏–≤–Ω—ã–µ
      for await (const task of this.iterateAllTasks(formId, { 
        includeArchived: true,
        batchSize: 200,
        logProgress: false
      })) {
        totalTasks++
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö
        if (task.status && task.status.toLowerCase().includes('archive')) {
          archivedTasks++
        }
      }

      const activeTasks = totalTasks - archivedTasks

      console.log(`PyrusPaginationHandler: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ä–º—ã ${formId} - –≤—Å–µ–≥–æ: ${totalTasks}, –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${activeTasks}, –∞—Ä—Ö–∏–≤–Ω—ã—Ö: ${archivedTasks}`)

      return {
        totalTasks,
        archivedTasks,
        activeTasks
      }

    } catch (error) {
      console.error(`PyrusPaginationHandler: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–æ—Ä–º—ã ${formId}:`, error)
      return null
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã
   */
  async formExists(formId: number): Promise<boolean> {
    try {
      const response = await this.client.get(`forms/${formId}`)
      return response !== null
    } catch (error) {
      console.error(`PyrusPaginationHandler: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã ${formId}:`, error)
      return false
    }
  }
}
