/**
 * –ö—É—Ä—Å–æ—Ä–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º Pyrus API v4
 * 
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Pyrus API:
 * @see PYRUS_API_INTEGRATION_GUIDE.md
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä `cursor` –∏ –ø–æ–ª–µ `next_cursor` –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–∞—Ö.
 */

import { PyrusBaseClient } from '../base-client'
import { PyrusTask } from '../forms-client'
import { pyrusDebugLogger } from './debug-logger'

export interface PaginationOptions {
  includeArchived?: boolean
  maxTasks?: number
  batchSize?: number
  logProgress?: boolean
}

interface PyrusTasksResponse {
  tasks: PyrusTask[]
  next_cursor?: string  // –ö—É—Ä—Å–æ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API v4)
}

export class PyrusPaginationHandler {
  private client: PyrusBaseClient

  constructor(client: PyrusBaseClient) {
    this.client = client
  }

  /**
   * –ò—Ç–µ—Ä–∞—Ç–æ—Ä –ø–æ –∑–∞–¥–∞—á–∞–º —Ñ–æ—Ä–º—ã —Å –ö–£–†–°–û–†–ù–û–ô –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Pyrus API v4
   * @see PYRUS_API_INTEGRATION_GUIDE.md
   */
  async *iterateAllTasks(
    formId: number,
    options: PaginationOptions = {}
  ): AsyncGenerator<PyrusTask, void, unknown> {
    const {
      includeArchived = false,
      maxTasks = Infinity,
      batchSize = 200, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ Pyrus API
      logProgress = true
    } = options

    let processedTasks = 0
    let pageNumber = 0
    let cursor: string | null = null // –ö—É—Ä—Å–æ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö ID –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const seenTaskIds = new Set<number>()

    if (logProgress) {
      console.log(`üìÑ PyrusPaginationHandler: –Ω–∞—á–∏–Ω–∞–µ–º –∫—É—Ä—Å–æ—Ä–Ω—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ñ–æ—Ä–º—ã ${formId}`)
      pyrusDebugLogger.incrementGlobal(`form_${formId}_iterations_started`)
    }

    // –¶–∏–∫–ª –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    while (processedTasks < maxTasks) {
      pageNumber++
      
      try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Pyrus API v4
        const params = new URLSearchParams({
          item_count: Math.min(batchSize, maxTasks - processedTasks).toString(),
          include_archived: includeArchived ? 'y' : 'n'
        })

        // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (cursor) {
          params.append('cursor', cursor)
        }

        const endpoint = `forms/${formId}/register?${params.toString()}`
        
        if (logProgress) {
          console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber}: –∑–∞–ø—Ä–æ—Å –∫ ${endpoint.substring(0, 100)}${cursor ? '...' : ''}`)
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º timeout (60 —Å–µ–∫ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü)
        const response = await this.client.get<PyrusTasksResponse>(endpoint, {
          timeout: 60000
        })

        if (!response) {
          console.error(`‚ùå PyrusPaginationHandler: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º—ã ${formId}`)
          break
        }

        const { tasks = [], next_cursor } = response
        const tasksReceived = tasks.length

        if (logProgress) {
          console.log(`  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${tasksReceived} –∑–∞–¥–∞—á, next_cursor: ${next_cursor ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`)
        }

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        if (tasksReceived === 0) {
          if (logProgress) {
            console.log(`üèÅ PyrusPaginationHandler: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º`)
          }
          break
        }

        // –û—Ç–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –æ–¥–Ω–æ–π
        for (const task of tasks) {
          if (processedTasks >= maxTasks) {
            break
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
          if (seenTaskIds.has(task.id)) {
            if (logProgress) {
              console.warn(`‚ö†Ô∏è  PyrusPaginationHandler: –ø—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞ task_id=${task.id}`)
            }
            pyrusDebugLogger.incrementGlobal(`form_${formId}_duplicates_skipped`)
            continue
          }
          
          seenTaskIds.add(task.id)
          yield task
          processedTasks++
          
          pyrusDebugLogger.incrementGlobal(`form_${formId}_tasks_yielded`)
        }

        // –ö–£–†–°–û–†–ù–ê–Ø –ü–ê–ì–ò–ù–ê–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ next_cursor
        if (!next_cursor) {
          // –ö—É—Ä—Å–æ—Ä–∞ –Ω–µ—Ç - —ç—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
          if (logProgress) {
            console.log(`üèÅ PyrusPaginationHandler: next_cursor –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å`)
          }
          break
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        cursor = next_cursor
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        if (processedTasks >= maxTasks) {
          if (logProgress) {
            console.log(`üèÅ PyrusPaginationHandler: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç maxTasks=${maxTasks}, –∑–∞–≤–µ—Ä—à–∞–µ–º`)
          }
          break
        }

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 500 –∑–∞–¥–∞—á
        if (logProgress && processedTasks % 500 === 0) {
          console.log(`üìä PyrusPaginationHandler: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedTasks} –∑–∞–¥–∞—á —Ñ–æ—Ä–º—ã ${formId}`)
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç rate limiting)
        await new Promise(resolve => setTimeout(resolve, 100))

      } catch (error) {
        console.error(`‚ùå PyrusPaginationHandler: –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNumber} —Ñ–æ—Ä–º—ã ${formId}:`, error)
        pyrusDebugLogger.incrementGlobal(`form_${formId}_pagination_errors`)
        
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        await new Promise(resolve => setTimeout(resolve, 5000))
        continue
      }
    }

    if (logProgress) {
      console.log(`\nüèÅ PyrusPaginationHandler: –∫—É—Ä—Å–æ—Ä–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞`)
      console.log(`  üìä –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${pageNumber}`)
      console.log(`  üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: ${processedTasks}`)
      console.log(`  üîç –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${seenTaskIds.size - processedTasks}`)
      pyrusDebugLogger.incrementGlobal(`form_${formId}_total_processed`, processedTasks)
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ
   */
  async getFormStats(formId: number): Promise<{
    totalTasks: number
    archivedTasks: number
    activeTasks: number
  } | null> {
    try {
      console.log(`PyrusPaginationHandler: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—ã ${formId}`)
      
      let totalTasks = 0
      let archivedTasks = 0

      // –°—á–∏—Ç–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤–∫–ª—é—á–∞—è –∞—Ä—Ö–∏–≤–Ω—ã–µ
      for await (const task of this.iterateAllTasks(formId, { 
        includeArchived: true,
        batchSize: 200,
        logProgress: false
      })) {
        totalTasks++
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö
        if (task.status && task.status.toLowerCase().includes('archive')) {
          archivedTasks++
        }
      }

      const activeTasks = totalTasks - archivedTasks

      console.log(`PyrusPaginationHandler: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ä–º—ã ${formId} - –≤—Å–µ–≥–æ: ${totalTasks}, –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${activeTasks}, –∞—Ä—Ö–∏–≤–Ω—ã—Ö: ${archivedTasks}`)

      return {
        totalTasks,
        archivedTasks,
        activeTasks
      }

    } catch (error) {
      console.error(`PyrusPaginationHandler: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–æ—Ä–º—ã ${formId}:`, error)
      return null
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã
   */
  async formExists(formId: number): Promise<boolean> {
    try {
      const response = await this.client.get(`forms/${formId}`)
      return response !== null
    } catch (error) {
      console.error(`PyrusPaginationHandler: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã ${formId}:`, error)
      return false
    }
  }
}
