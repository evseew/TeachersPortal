/**
 * –°–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ Pyrus-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
 * –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –ª–æ–≥–∏–∫–µ –∏–∑ final_fixed_report.md
 */

export interface DebugCounters {
  [key: string]: number
}

export interface DebugTarget {
  name: string
  counters: DebugCounters
}

export class PyrusDebugLogger {
  private targets: Map<string, DebugTarget> = new Map()
  private globalCounters: DebugCounters = {}

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è)
   */
  addTarget(targetName: string, initialCounters: DebugCounters = {}): void {
    this.targets.set(targetName, {
      name: targetName,
      counters: { ...initialCounters }
    })
    
    console.log(`üéØ –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ü–µ–ª—å "${targetName}"`)
  }

  /**
   * –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏
   */
  incrementTarget(targetName: string, counterName: string, value = 1): void {
    const target = this.targets.get(targetName)
    if (target) {
      target.counters[counterName] = (target.counters[counterName] || 0) + value
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
      if (counterName.includes('processed') || counterName.includes('found')) {
        console.log(`   üîÑ ${targetName}: ${counterName} = ${target.counters[counterName]}`)
      }
    }
  }

  /**
   * –£–≤–µ–ª–∏—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
   */
  incrementGlobal(counterName: string, value = 1): void {
    this.globalCounters[counterName] = (this.globalCounters[counterName] || 0) + value
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ü–µ–ª–∏
   */
  logTargetDetail(targetName: string, message: string, data?: any): void {
    const target = this.targets.get(targetName)
    if (target) {
      console.log(`   üìù ${targetName}: ${message}`, data || '')
    }
  }

  /**
   * –í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Ü–µ–ª—è–º
   */
  printFinalSummary(): void {
    console.log('\n' + '='.repeat(80))
    console.log('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –°–í–û–î–ö–ê')
    console.log('='.repeat(80))

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
    if (Object.keys(this.globalCounters).length > 0) {
      console.log('üìä –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–ß–ï–¢–ß–ò–ö–ò:')
      for (const [key, value] of Object.entries(this.globalCounters)) {
        console.log(`   ${key}: ${value}`)
      }
      console.log('')
    }

    // –ü–æ –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏
    for (const target of this.targets.values()) {
      console.log(`üéØ –¶–ï–õ–¨: ${target.name}`)
      for (const [key, value] of Object.entries(target.counters)) {
        const emoji = this.getCounterEmoji(key)
        console.log(`   ${emoji} ${key}: ${value}`)
      }
      console.log('')
    }

    console.log('='.repeat(80))
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å emoji –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞
   */
  private getCounterEmoji(counterName: string): string {
    if (counterName.includes('found')) return 'üîç'
    if (counterName.includes('valid')) return '‚úÖ'
    if (counterName.includes('excluded')) return '‚ùå'
    if (counterName.includes('processed')) return 'üîÑ'
    if (counterName.includes('error')) return 'üí•'
    return 'üìä'
  }

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏
   */
  reset(): void {
    this.targets.clear()
    this.globalCounters = {}
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–µ–ª–∏
   */
  getTargetStats(targetName: string): DebugCounters | null {
    const target = this.targets.get(targetName)
    return target ? { ...target.counters } : null
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  getGlobalStats(): DebugCounters {
    return { ...this.globalCounters }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ—Ö Pyrus-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ö
export const pyrusDebugLogger = new PyrusDebugLogger()
