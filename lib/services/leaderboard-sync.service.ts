/**
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è –ª–æ–≥–∏–∫—É –∏–∑ sync-users –∏ sync-leaderboard
 * –¶–µ–ª—å: –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∏—Å—Ç–∏–Ω—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */

import { supabaseAdmin } from '@/lib/supabase/admin'

export interface SyncResult {
  success: boolean
  teachersInProfiles: number
  phantomUsersRemoved: number
  missingTeachersAdded: number
  finalTeacherCount: number
  details: {
    phantomsRemoved: string[]
    teachersAdded: Array<{ id: string; name: string }>
  }
  error?: string
}

export interface LeaderboardTeacher {
  user_id: string
  full_name: string | null
  email: string
  role: string
  category: string | null
  branch_id: string | null
}

export class LeaderboardSyncService {
  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤
   * –ó–∞–º–µ–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è –ª–æ–≥–∏–∫—É –≤ sync-users –∏ sync-leaderboard
   */
  async syncTeacherData(): Promise<SyncResult> {
    try {
      console.log('üîÑ LeaderboardSyncService: –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...')

      // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ profiles
      const teachers = await this.getTeachersFromProfiles()
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${teachers.length} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ profiles`)

      // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ current_scores
      const currentScores = await this.getCurrentScores()
      console.log(`üìä –¢–µ–∫—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ current_scores: ${currentScores.length}`)

      // 3. –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const phantomUsers = await this.findAndRemovePhantomUsers(teachers, currentScores)
      
      // 4. –ù–∞—Ö–æ–¥–∏–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
      const missingTeachers = await this.findAndAddMissingTeachers(teachers, currentScores)

      // 5. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º branch_id –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
      await this.syncBranchIds(teachers)

      // 6. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
      await this.recomputeScores()

      // 7. –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const finalScores = await this.getCurrentScores()

      const result: SyncResult = {
        success: true,
        teachersInProfiles: teachers.length,
        phantomUsersRemoved: phantomUsers.length,
        missingTeachersAdded: missingTeachers.length,
        finalTeacherCount: finalScores.length,
        details: {
          phantomsRemoved: phantomUsers.map(p => p.teacher_id),
          teachersAdded: missingTeachers.map(t => ({ 
            id: t.user_id, 
            name: t.full_name || t.email 
          }))
        }
      }

      console.log('‚úÖ LeaderboardSyncService: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', result)
      return result

    } catch (error: any) {
      console.error('‚ùå LeaderboardSyncService: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error)
      
      return {
        success: false,
        teachersInProfiles: 0,
        phantomUsersRemoved: 0,
        missingTeachersAdded: 0,
        finalTeacherCount: 0,
        details: { phantomsRemoved: [], teachersAdded: [] },
        error: error.message || 'Unknown sync error'
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã profiles
   */
  private async getTeachersFromProfiles(): Promise<LeaderboardTeacher[]> {
    const { data, error } = await supabaseAdmin
      .from('profiles')
      .select('user_id, full_name, email, role, category, branch_id')
      .eq('role', 'Teacher')
      .order('full_name')

    if (error) throw error
    return data || []
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ current_scores –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
   */
  private async getCurrentScores() {
    const { data, error } = await supabaseAdmin
      .from('current_scores')
      .select('teacher_id, score, rank')
      .eq('scope', 'teacher_overall')
      .eq('context', 'all')
      .not('teacher_id', 'is', null)

    if (error) throw error
    return data || []
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –∏ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * (–µ—Å—Ç—å –≤ current_scores, –Ω–æ –Ω–µ—Ç –≤ profiles)
   */
  private async findAndRemovePhantomUsers(
    teachers: LeaderboardTeacher[], 
    currentScores: any[]
  ) {
    const teacherIds = new Set(teachers.map(t => t.user_id))
    const phantomScores = currentScores.filter(cs => !teacherIds.has(cs.teacher_id))

    if (phantomScores.length > 0) {
      console.log(`üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ ${phantomScores.length} —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
      
      const phantomIds = phantomScores.map(ps => ps.teacher_id)
      const { error } = await supabaseAdmin
        .from('current_scores')
        .delete()
        .eq('scope', 'teacher_overall')
        .eq('context', 'all')
        .in('teacher_id', phantomIds)

      if (error) throw error
      console.log('‚úÖ –§–∞–Ω—Ç–æ–º–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã')
    }

    return phantomScores
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
   * (–µ—Å—Ç—å –≤ profiles, –Ω–æ –Ω–µ—Ç –≤ current_scores/teacher_metrics)
   */
  private async findAndAddMissingTeachers(
    teachers: LeaderboardTeacher[],
    currentScores: any[]
  ) {
    const existingTeacherIds = new Set(currentScores.map(cs => cs.teacher_id))
    const missingTeachers = teachers.filter(t => !existingTeacherIds.has(t.user_id))

    if (missingTeachers.length > 0) {
      console.log(`‚ûï –ù–∞–π–¥–µ–Ω–æ ${missingTeachers.length} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π`)

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ teacher_metrics (–µ—Å–ª–∏ –Ω–µ—Ç)
      for (const teacher of missingTeachers) {
        const { error } = await supabaseAdmin
          .from('teacher_metrics')
          .upsert({
            teacher_id: teacher.user_id,
            branch_id: teacher.branch_id,
            last_year_base: 0,
            last_year_returned: 0,
            trial_total: 0,
            trial_converted: 0,
            updated_by: 'leaderboard-sync-service'
          }, { onConflict: 'teacher_id' })

        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ upsert –º–µ—Ç—Ä–∏–∫ –¥–ª—è ${teacher.full_name}:`, error)
        }
      }

      console.log('‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ teacher_metrics')
    }

    return missingTeachers
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç branch_id –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
   * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –º–µ–∂–¥—É profiles.branch_id –∏ teacher_metrics.branch_id
   */
  private async syncBranchIds(teachers: LeaderboardTeacher[]) {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º branch_id –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π...')

    for (const teacher of teachers) {
      const { error } = await supabaseAdmin
        .from('teacher_metrics')
        .update({
          branch_id: teacher.branch_id,
          updated_by: 'branch-sync'
        })
        .eq('teacher_id', teacher.user_id)

      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è branch_id –¥–ª—è ${teacher.full_name}:`, error)
      }
    }

    console.log('‚úÖ branch_id —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã')
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
   */
  private async recomputeScores() {
    console.log('üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏...')
    
    const { error } = await supabaseAdmin.rpc('recompute_current_scores')
    if (error) throw error
    
    console.log('‚úÖ –†–µ–π—Ç–∏–Ω–≥–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã')
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  async removePhantomUsers(): Promise<{ removed: number; phantomIds: string[] }> {
    const teachers = await this.getTeachersFromProfiles()
    const currentScores = await this.getCurrentScores()
    const phantomUsers = await this.findAndRemovePhantomUsers(teachers, currentScores)

    return {
      removed: phantomUsers.length,
      phantomIds: phantomUsers.map(p => p.teacher_id)
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
   * –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  async addMissingTeachers(): Promise<{ added: number; teacherIds: string[] }> {
    const teachers = await this.getTeachersFromProfiles()
    const currentScores = await this.getCurrentScores()
    const missingTeachers = await this.findAndAddMissingTeachers(teachers, currentScores)

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await this.recomputeScores()

    return {
      added: missingTeachers.length,
      teacherIds: missingTeachers.map(t => t.user_id)
    }
  }
}
