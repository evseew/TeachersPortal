/**
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–ª–∏–∞–ª–∞–º–∏
 * –ó–∞–º–µ–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è –ª–æ–≥–∏–∫—É –≤ use-branches –∏ use-branch-management
 * –¶–µ–ª—å: –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∏–ª–∏–∞–ª–∞–º–∏
 */

import { supabaseAdmin } from '@/lib/supabase/admin'
import type { Branch, BranchUsageInfo, CreateBranchData, UpdateBranchData } from '@/lib/types/shared'

export interface BranchValidationResult {
  isValid: boolean
  error?: string
}

export interface BranchOperationResult<T = any> {
  success: boolean
  data?: T
  error?: string
}

export class BranchService {
  private static instance: BranchService

  static getInstance(): BranchService {
    if (!BranchService.instance) {
      BranchService.instance = new BranchService()
    }
    return BranchService.instance
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã
   * –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  async listBranches(): Promise<Branch[]> {
    try {
      console.log('üè¢ BranchService: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤...')
      
      const { data, error } = await supabaseAdmin
        .from('branch')
        .select('id, name')
        .order('name', { ascending: true })

      if (error) throw error

      console.log(`‚úÖ BranchService: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} —Ñ–∏–ª–∏–∞–ª–æ–≤`)
      return data || []

    } catch (error: any) {
      console.error('‚ùå BranchService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤:', error)
      throw new Error(`Failed to load branches: ${error.message}`)
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   */
  async createBranch(data: CreateBranchData): Promise<BranchOperationResult<Branch>> {
    try {
      console.log(`üè¢ BranchService: –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª–∏–∞–ª "${data.name}"...`)

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      const validation = await this.validateBranchData(data.name)
      if (!validation.isValid) {
        return {
          success: false,
          error: validation.error
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
      const uniqueCheck = await this.checkNameUniqueness(data.name)
      if (!uniqueCheck.isValid) {
        return {
          success: false,
          error: uniqueCheck.error
        }
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ
      const { data: newBranch, error } = await supabaseAdmin
        .from('branch')
        .insert({ name: data.name.trim() })
        .select('id, name')
        .single()

      if (error) throw error

      console.log(`‚úÖ BranchService: –§–∏–ª–∏–∞–ª "${newBranch.name}" —Å–æ–∑–¥–∞–Ω —Å ID ${newBranch.id}`)

      return {
        success: true,
        data: newBranch
      }

    } catch (error: any) {
      console.error('‚ùå BranchService: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞:', error)
      return {
        success: false,
        error: `Failed to create branch: ${error.message}`
      }
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∏–ª–∏–∞–ª —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   */
  async updateBranch(id: string, data: UpdateBranchData): Promise<BranchOperationResult<Branch>> {
    try {
      console.log(`üè¢ BranchService: –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª–∏–∞–ª ${id} -> "${data.name}"...`)

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      const validation = await this.validateBranchData(data.name)
      if (!validation.isValid) {
        return {
          success: false,
          error: validation.error
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª–∏–∞–ª)
      const uniqueCheck = await this.checkNameUniqueness(data.name, id)
      if (!uniqueCheck.isValid) {
        return {
          success: false,
          error: uniqueCheck.error
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
      const existsCheck = await this.checkBranchExists(id)
      if (!existsCheck.isValid) {
        return {
          success: false,
          error: existsCheck.error
        }
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const { data: updatedBranch, error } = await supabaseAdmin
        .from('branch')
        .update({ name: data.name.trim() })
        .eq('id', id)
        .select('id, name')
        .single()

      if (error) throw error

      console.log(`‚úÖ BranchService: –§–∏–ª–∏–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω: ${updatedBranch.name}`)

      return {
        success: true,
        data: updatedBranch
      }

    } catch (error: any) {
      console.error('‚ùå BranchService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞:', error)
      return {
        success: false,
        error: `Failed to update branch: ${error.message}`
      }
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Ñ–∏–ª–∏–∞–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   */
  async deleteBranch(id: string): Promise<BranchOperationResult<void>> {
    try {
      console.log(`üè¢ BranchService: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞ ${id}...`)

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
      const usageInfo = await this.checkBranchUsage(id)
      if (!usageInfo.canDelete) {
        return {
          success: false,
          error: `Cannot delete branch: ${usageInfo.linkedRecords.profiles} profiles and ${usageInfo.linkedRecords.metrics} metrics are linked to this branch`
        }
      }

      // –£–¥–∞–ª–µ–Ω–∏–µ
      const { error } = await supabaseAdmin
        .from('branch')
        .delete()
        .eq('id', id)

      if (error) throw error

      console.log(`‚úÖ BranchService: –§–∏–ª–∏–∞–ª ${id} —É–¥–∞–ª–µ–Ω`)

      return { success: true }

    } catch (error: any) {
      console.error('‚ùå BranchService: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞:', error)
      return {
        success: false,
        error: `Failed to delete branch: ${error.message}`
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
   */
  async checkBranchUsage(id: string): Promise<BranchUsageInfo> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
      const { data: linkedProfiles, error: profilesError } = await supabaseAdmin
        .from('profiles')
        .select('user_id, full_name, email')
        .eq('branch_id', id)

      if (profilesError) throw profilesError

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      const { data: linkedMetrics, error: metricsError } = await supabaseAdmin
        .from('teacher_metrics')
        .select('teacher_id')
        .eq('branch_id', id)

      if (metricsError) throw metricsError

      const profileDetails = (linkedProfiles || []).map(p => ({
        user_id: p.user_id,
        full_name: p.full_name || '–ë–µ–∑ –∏–º–µ–Ω–∏',
        email: p.email
      }))

      const canDelete = (linkedProfiles?.length || 0) === 0 && (linkedMetrics?.length || 0) === 0

      return {
        canDelete,
        linkedRecords: {
          profiles: linkedProfiles?.length || 0,
          metrics: linkedMetrics?.length || 0,
          profileDetails
        }
      }

    } catch (error: any) {
      console.error('‚ùå BranchService: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', error)
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ñ–∏–ª–∏–∞–ª –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
      return {
        canDelete: false,
        linkedRecords: {
          profiles: -1,
          metrics: -1,
          profileDetails: []
        }
      }
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª–∞
   */
  private async validateBranchData(name: string): Promise<BranchValidationResult> {
    const trimmedName = name?.trim()

    if (!trimmedName) {
      return {
        isValid: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
      }
    }

    if (trimmedName.length < 2) {
      return {
        isValid: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞'
      }
    }

    if (trimmedName.length > 100) {
      return {
        isValid: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤'
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    const invalidChars = /[<>\"'&]/
    if (invalidChars.test(trimmedName)) {
      return {
        isValid: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã'
      }
    }

    return { isValid: true }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
   */
  private async checkNameUniqueness(name: string, excludeId?: string): Promise<BranchValidationResult> {
    try {
      let query = supabaseAdmin
        .from('branch')
        .select('id, name')
        .ilike('name', name.trim())

      if (excludeId) {
        query = query.neq('id', excludeId)
      }

      const { data, error } = await query

      if (error) throw error

      if (data && data.length > 0) {
        return {
          isValid: false,
          error: '–§–∏–ª–∏–∞–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        }
      }

      return { isValid: true }

    } catch (error: any) {
      console.error('‚ùå Error checking name uniqueness:', error)
      return {
        isValid: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è'
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
   */
  private async checkBranchExists(id: string): Promise<BranchValidationResult> {
    try {
      const { data, error } = await supabaseAdmin
        .from('branch')
        .select('id')
        .eq('id', id)
        .single()

      if (error || !data) {
        return {
          isValid: false,
          error: '–§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }
      }

      return { isValid: true }

    } catch (error: any) {
      return {
        isValid: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞'
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∏–ª–∏–∞–ª –ø–æ ID
   */
  async getBranchById(id: string): Promise<BranchOperationResult<Branch>> {
    try {
      const { data, error } = await supabaseAdmin
        .from('branch')
        .select('id, name')
        .eq('id', id)
        .single()

      if (error) throw error

      return {
        success: true,
        data
      }

    } catch (error: any) {
      return {
        success: false,
        error: `Branch not found: ${error.message}`
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
   */
  async getBranchesStats(): Promise<{
    totalBranches: number
    branchesWithTeachers: number
    averageTeachersPerBranch: number
  }> {
    try {
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª–∏–∞–ª–æ–≤
      const { count: totalBranches } = await supabaseAdmin
        .from('branch')
        .select('*', { count: 'exact', head: true })

      // –§–∏–ª–∏–∞–ª—ã —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
      const { data: branchesWithTeachers } = await supabaseAdmin
        .from('profiles')
        .select('branch_id')
        .eq('role', 'Teacher')
        .not('branch_id', 'is', null)

      const uniqueBranches = new Set(branchesWithTeachers?.map(p => p.branch_id) || [])
      const branchesWithTeachersCount = uniqueBranches.size

      const averageTeachersPerBranch = branchesWithTeachersCount > 0 
        ? Math.round((branchesWithTeachers?.length || 0) / branchesWithTeachersCount)
        : 0

      return {
        totalBranches: totalBranches || 0,
        branchesWithTeachers: branchesWithTeachersCount,
        averageTeachersPerBranch
      }

    } catch (error: any) {
      console.error('‚ùå Error getting branches stats:', error)
      return {
        totalBranches: 0,
        branchesWithTeachers: 0,
        averageTeachersPerBranch: 0
      }
    }
  }
}
