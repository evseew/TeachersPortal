/**
 * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
 * –¶–µ–ª—å: –ò–∑–±–µ–∂–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Å—á–µ—Ç–æ–≤
 */

import { supabaseAdmin } from '@/lib/supabase/admin'

export interface RecomputationResult {
  executed: boolean
  reason: string
  teacherChanges?: number
  branchChanges?: number
  timestamp: string
  duration?: number
}

export interface RecomputationOptions {
  force?: boolean
  scope?: 'teacher_overall' | 'branch_overall' | 'all'
  skipIfRecent?: boolean
  maxFrequency?: number // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–µ—Ä–µ—Å—á–µ—Ç–∞–º–∏
}

export class ScoreRecomputationService {
  private static instance: ScoreRecomputationService
  private lastRecomputeTime: Map<string, Date> = new Map()
  private readonly DEFAULT_MIN_INTERVAL = 30000 // 30 —Å–µ–∫—É–Ω–¥

  static getInstance(): ScoreRecomputationService {
    if (!ScoreRecomputationService.instance) {
      ScoreRecomputationService.instance = new ScoreRecomputationService()
    }
    return ScoreRecomputationService.instance
  }

  /**
   * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
   * –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  async recomputeIfNeeded(
    trigger: string,
    options: RecomputationOptions = {}
  ): Promise<RecomputationResult> {
    const startTime = Date.now()
    const timestamp = new Date().toISOString()

    try {
      console.log(`üß† SmartRecomputation: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Å—á–µ—Ç–∞ (trigger: ${trigger})`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É –≤—ã–∑–æ–≤–æ–≤
      if (!options.force && options.skipIfRecent !== false) {
        const frequencyCheck = this.checkFrequency(trigger, options.maxFrequency)
        if (!frequencyCheck.allowed) {
          return {
            executed: false,
            reason: frequencyCheck.reason,
            timestamp
          }
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö
      if (!options.force) {
        const changesCheck = await this.detectChanges(options.scope)
        if (!changesCheck.hasChanges) {
          return {
            executed: false,
            reason: changesCheck.reason,
            timestamp
          }
        }
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç
      const result = await this.performRecomputation(options.scope)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
      this.lastRecomputeTime.set(trigger, new Date())

      const duration = Date.now() - startTime

      console.log(`‚úÖ SmartRecomputation: –ü–µ—Ä–µ—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${duration}ms`)

      return {
        executed: true,
        reason: `Recomputation executed for ${options.scope || 'all'} scope`,
        teacherChanges: result.teacherChanges,
        branchChanges: result.branchChanges,
        timestamp,
        duration
      }

    } catch (error: any) {
      console.error('‚ùå SmartRecomputation: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:', error)
      
      return {
        executed: false,
        reason: `Error: ${error.message}`,
        timestamp
      }
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
   */
  async forceRecompute(scope?: 'teacher_overall' | 'branch_overall' | 'all'): Promise<RecomputationResult> {
    return this.recomputeIfNeeded('force', { force: true, scope })
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∞—Å—Ç–æ—Ç—É –≤—ã–∑–æ–≤–æ–≤
   */
  private checkFrequency(
    trigger: string, 
    maxFrequency?: number
  ): { allowed: boolean; reason: string } {
    const minInterval = maxFrequency || this.DEFAULT_MIN_INTERVAL
    const lastTime = this.lastRecomputeTime.get(trigger)
    
    if (!lastTime) {
      return { allowed: true, reason: 'First execution for this trigger' }
    }

    const timeSinceLastCall = Date.now() - lastTime.getTime()
    
    if (timeSinceLastCall < minInterval) {
      const remainingTime = Math.ceil((minInterval - timeSinceLastCall) / 1000)
      return {
        allowed: false,
        reason: `Too frequent calls. Wait ${remainingTime}s (last call: ${lastTime.toISOString()})`
      }
    }

    return { allowed: true, reason: 'Frequency check passed' }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–±—É—é—â–∏–µ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
   */
  private async detectChanges(scope?: string): Promise<{ hasChanges: boolean; reason: string }> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ teacher_metrics –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
      const { data: recentChanges, error } = await supabaseAdmin
        .from('teacher_metrics')
        .select('teacher_id')
        .gte('updated_at', new Date(Date.now() - 5 * 60 * 1000).toISOString())

      if (error) throw error

      if (!recentChanges || recentChanges.length === 0) {
        return {
          hasChanges: false,
          reason: 'No changes in teacher_metrics in the last 5 minutes'
        }
      }

      return {
        hasChanges: true,
        reason: `Found ${recentChanges.length} recent changes in teacher_metrics`
      }

    } catch (error: any) {
      console.error('‚ùå Error detecting changes:', error)
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å—Ç—å (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
      return {
        hasChanges: true,
        reason: `Error detecting changes, assuming changes exist: ${error.message}`
      }
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
   */
  private async performRecomputation(
    scope?: 'teacher_overall' | 'branch_overall' | 'all'
  ): Promise<{ teacherChanges: number; branchChanges: number }> {
    
    if (scope === 'teacher_overall') {
      // –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—É—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é RPC —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
      try {
        const { data, error } = await supabaseAdmin.rpc('recompute_current_scores_v2', {
          p_scope: 'teacher_overall',
          p_force: false
        })

        if (error) throw error
        return {
          teacherChanges: data?.teacher_changes || 0,
          branchChanges: 0
        }
      } catch (error) {
        // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        const { error: fallbackError } = await supabaseAdmin.rpc('recompute_current_scores')
        if (fallbackError) throw fallbackError
        return { teacherChanges: 1, branchChanges: 0 }
      }
    }

    if (scope === 'branch_overall') {
      try {
        const { data, error } = await supabaseAdmin.rpc('recompute_current_scores_v2', {
          p_scope: 'branch_overall',
          p_force: false
        })

        if (error) throw error
        return {
          teacherChanges: 0,
          branchChanges: data?.branch_changes || 0
        }
      } catch (error) {
        // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        const { error: fallbackError } = await supabaseAdmin.rpc('recompute_current_scores')
        if (fallbackError) throw fallbackError
        return { teacherChanges: 0, branchChanges: 1 }
      }
    }

    // –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    try {
      const { data, error } = await supabaseAdmin.rpc('recompute_current_scores_v2', {
        p_scope: null,
        p_force: false
      })

      if (error) throw error
      
      return {
        teacherChanges: data?.teacher_changes || 0,
        branchChanges: data?.branch_changes || 0
      }
    } catch (error) {
      // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
      const { error: fallbackError } = await supabaseAdmin.rpc('recompute_current_scores')
      if (fallbackError) throw fallbackError
      return { teacherChanges: 1, branchChanges: 1 }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Å—á–µ—Ç–æ–≤
   */
  getRecomputationStats(): {
    triggers: Array<{ name: string; lastExecution: string }>
    totalTriggers: number
  } {
    const triggers = Array.from(this.lastRecomputeTime.entries()).map(([name, date]) => ({
      name,
      lastExecution: date.toISOString()
    }))

    return {
      triggers,
      totalTriggers: triggers.length
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ—Å—á–µ—Ç–æ–≤
   */
  clearHistory(): void {
    this.lastRecomputeTime.clear()
    console.log('üßπ SmartRecomputation: –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞')
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
   * –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  setLastRecomputeTime(trigger: string, time: Date): void {
    this.lastRecomputeTime.set(trigger, time)
  }
}
