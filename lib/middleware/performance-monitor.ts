/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API
 * –¶–µ–ª—å: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ —É–∑–∫–∏—Ö –º–µ—Å—Ç
 */

import { NextRequest, NextResponse } from 'next/server'

export interface PerformanceMetric {
  endpoint: string
  method: string
  duration: number
  statusCode: number
  timestamp: string
  requestId: string
  userAgent?: string
  ip?: string
  queryParams?: Record<string, string>
  bodySize?: number
  responseSize?: number
}

export interface PerformanceStats {
  endpoint: string
  totalRequests: number
  averageDuration: number
  minDuration: number
  maxDuration: number
  errorRate: number
  lastRequest: string
}

class PerformanceMonitor {
  private metrics: PerformanceMetric[] = []
  private readonly maxMetrics = 1000 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤ –ø–∞–º—è—Ç–∏

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  recordMetric(metric: PerformanceMetric): void {
    this.metrics.push(metric)

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞
    if (this.metrics.length > this.maxMetrics) {
      this.metrics = this.metrics.slice(-this.maxMetrics)
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if (metric.duration > 5000) { // > 5 —Å–µ–∫—É–Ω–¥
      console.warn(`üêå [Performance] Slow request detected:`, {
        endpoint: metric.endpoint,
        duration: `${metric.duration}ms`,
        method: metric.method,
        statusCode: metric.statusCode
      })
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    if (metric.statusCode >= 400) {
      console.error(`‚ùå [Performance] API error:`, {
        endpoint: metric.endpoint,
        statusCode: metric.statusCode,
        duration: `${metric.duration}ms`
      })
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
   */
  getEndpointStats(endpoint: string): PerformanceStats | null {
    const endpointMetrics = this.metrics.filter(m => m.endpoint === endpoint)
    
    if (endpointMetrics.length === 0) {
      return null
    }

    const durations = endpointMetrics.map(m => m.duration)
    const errors = endpointMetrics.filter(m => m.statusCode >= 400)

    return {
      endpoint,
      totalRequests: endpointMetrics.length,
      averageDuration: Math.round(durations.reduce((sum, d) => sum + d, 0) / durations.length),
      minDuration: Math.min(...durations),
      maxDuration: Math.max(...durations),
      errorRate: Math.round((errors.length / endpointMetrics.length) * 100),
      lastRequest: endpointMetrics[endpointMetrics.length - 1].timestamp
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  getOverallStats(): {
    totalRequests: number
    averageDuration: number
    errorRate: number
    topSlowEndpoints: Array<{ endpoint: string; avgDuration: number }>
    topErrorEndpoints: Array<{ endpoint: string; errorRate: number }>
  } {
    if (this.metrics.length === 0) {
      return {
        totalRequests: 0,
        averageDuration: 0,
        errorRate: 0,
        topSlowEndpoints: [],
        topErrorEndpoints: []
      }
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º
    const endpointGroups = this.metrics.reduce((groups, metric) => {
      if (!groups[metric.endpoint]) {
        groups[metric.endpoint] = []
      }
      groups[metric.endpoint].push(metric)
      return groups
    }, {} as Record<string, PerformanceMetric[]>)

    // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º
    const endpointStats = Object.entries(endpointGroups).map(([endpoint, metrics]) => {
      const durations = metrics.map(m => m.duration)
      const errors = metrics.filter(m => m.statusCode >= 400)
      
      return {
        endpoint,
        avgDuration: Math.round(durations.reduce((sum, d) => sum + d, 0) / durations.length),
        errorRate: Math.round((errors.length / metrics.length) * 100)
      }
    })

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalDuration = this.metrics.reduce((sum, m) => sum + m.duration, 0)
    const totalErrors = this.metrics.filter(m => m.statusCode >= 400).length

    return {
      totalRequests: this.metrics.length,
      averageDuration: Math.round(totalDuration / this.metrics.length),
      errorRate: Math.round((totalErrors / this.metrics.length) * 100),
      topSlowEndpoints: endpointStats
        .sort((a, b) => b.avgDuration - a.avgDuration)
        .slice(0, 5),
      topErrorEndpoints: endpointStats
        .filter(s => s.errorRate > 0)
        .sort((a, b) => b.errorRate - a.errorRate)
        .slice(0, 5)
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏
   */
  cleanup(olderThanHours: number = 24): void {
    const cutoffTime = new Date(Date.now() - olderThanHours * 60 * 60 * 1000)
    const initialCount = this.metrics.length
    
    this.metrics = this.metrics.filter(m => 
      new Date(m.timestamp) > cutoffTime
    )

    const removedCount = initialCount - this.metrics.length
    if (removedCount > 0) {
      console.log(`üßπ [Performance] Cleaned up ${removedCount} old metrics`)
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  exportMetrics(format: 'json' | 'csv' = 'json'): string {
    if (format === 'csv') {
      const headers = 'endpoint,method,duration,statusCode,timestamp,requestId'
      const rows = this.metrics.map(m => 
        `${m.endpoint},${m.method},${m.duration},${m.statusCode},${m.timestamp},${m.requestId}`
      )
      return [headers, ...rows].join('\n')
    }

    return JSON.stringify(this.metrics, null, 2)
  }
}

// Singleton instance
const performanceMonitor = new PerformanceMonitor()

/**
 * Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export function withPerformanceMonitoring<T extends (...args: any[]) => any>(
  handler: T,
  endpointName?: string
): T {
  return (async (...args: any[]) => {
    const request = args[0] as NextRequest
    const startTime = Date.now()
    const requestId = Math.random().toString(36).substring(7)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    const endpoint = endpointName || request.url?.split('?')[0] || 'unknown'
    
    try {
      const response = await handler(...args)
      const duration = Date.now() - startTime
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –∏–∑ –æ—Ç–≤–µ—Ç–∞
      let statusCode = 200
      if (response instanceof NextResponse) {
        statusCode = response.status
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É
      const metric: PerformanceMetric = {
        endpoint,
        method: request.method,
        duration,
        statusCode,
        timestamp: new Date().toISOString(),
        requestId,
        userAgent: request.headers.get('user-agent') || undefined,
        ip: request.headers.get('x-forwarded-for') || 
            request.headers.get('x-real-ip') || undefined,
        queryParams: Object.fromEntries(new URL(request.url).searchParams.entries())
      }

      performanceMonitor.recordMetric(metric)

      return response
    } catch (error) {
      const duration = Date.now() - startTime
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –æ—à–∏–±–∫–∏
      const metric: PerformanceMetric = {
        endpoint,
        method: request.method,
        duration,
        statusCode: 500,
        timestamp: new Date().toISOString(),
        requestId
      }

      performanceMonitor.recordMetric(metric)
      
      throw error
    }
  }) as T
}

/**
 * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
export const getEndpointStats = (endpoint: string) => 
  performanceMonitor.getEndpointStats(endpoint)

export const getOverallStats = () => 
  performanceMonitor.getOverallStats()

export const exportMetrics = (format: 'json' | 'csv' = 'json') => 
  performanceMonitor.exportMetrics(format)

export const cleanupMetrics = (olderThanHours: number = 24) => 
  performanceMonitor.cleanup(olderThanHours)

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫ –∫–∞–∂–¥—ã–π —á–∞—Å
 */
if (typeof window === 'undefined') { // –¢–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  setInterval(() => {
    performanceMonitor.cleanup(24)
  }, 60 * 60 * 1000) // –ö–∞–∂–¥—ã–π —á–∞—Å
}

export { performanceMonitor }
