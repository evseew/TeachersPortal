import GoogleProvider from "next-auth/providers/google"
import CredentialsProvider from "next-auth/providers/credentials"
import type { NextAuthOptions } from "next-auth"

import { supabaseAdmin } from "@/lib/supabase/admin"
import { type UserRole } from "@/lib/constants/user-management"

const allowedDomain = "planetenglish.ru"

export const authOptions: NextAuthOptions = {
  providers: [
    // Development auto-login provider
    ...(process.env.NODE_ENV === 'development' ? [
      CredentialsProvider({
        id: "dev-auto-login",
        name: "Dev Auto Login",
        credentials: {},
        async authorize() {
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
          return {
            id: "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11",
            email: "dev@planetenglish.ru",
            name: "Dev User",
            role: "Administrator"
          }
        }
      })
    ] : []),
    // –í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID ?? "",
      clientSecret: process.env.GOOGLE_CLIENT_SECRET ?? "",
    }),
  ],
  callbacks: {
    async signIn({ user, account }) {
      const email = user?.email ?? ""
      if (!email) return false
      
      // –î–ª—è dev –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Ö–æ–¥ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
      if (process.env.NODE_ENV === 'development' && account?.provider === 'dev-auto-login') {
        console.log(`üöÄ Dev auto-login –¥–ª—è ${email}`)
        return true
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω
      const domain = email.split("@")[1]
      if (domain !== allowedDomain) return false
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –ø–æ—Ä—Ç–∞–ª–∞
      try {
        const { data: profile } = await supabaseAdmin
          .from('profiles')
          .select('user_id')
          .eq('email', email)
          .single()
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
        return !!profile
      } catch (error) {
        console.log(`–í—Ö–æ–¥ –∑–∞–ø—Ä–µ—â–µ–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø–æ—Ä—Ç–∞–ª–∞`)
        return false
      }
    },
    async session({ session, token }) {
      if (session?.user && token?.email) {
        session.user.email = token.email as string

        // –î–ª—è dev –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ development —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ Administrator
        if (process.env.NODE_ENV === 'development' && token.email === 'dev@planetenglish.ru') {
          session.user.role = 'Administrator'
          console.log(`üîç Dev –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${token.email} –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å: Administrator`)
        } else {
          // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–ª—å –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –ë–î
          if (token.role && typeof token.role === 'string') {
            session.user.role = token.role as UserRole
          } else {
            // –î–ª—è OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ –ë–î —á–µ—Ä–µ–∑ profiles_with_role view
            try {
              const { data: profile } = await supabaseAdmin
                .from('profiles_with_role')
                .select('role')
                .eq('email', token.email)
                .single()

              if (profile) {
                session.user.role = profile.role
                console.log(`üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${token.email} –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å –∏–∑ –ë–î: ${profile.role}`)
              } else {
                // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Regular User
                session.user.role = 'Regular User'
                console.log(`‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${token.email}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Regular User`)
              }
            } catch (error) {
              console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏:", error)
              // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Regular User –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
              session.user.role = 'Regular User'
              console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –¥–ª—è ${token.email}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Regular User`)
            }
          }
        }
      }
      return session
    },
    async jwt({ token, account, profile, user }) {
      // –î–ª—è credentials provider (dev-auto-login) –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ user
      if (user?.email) {
        token.email = user.email
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –≤ —Ç–æ–∫–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        // –î–ª—è dev –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å –±—É–¥–µ—Ç Administrator –∏–∑ credentials provider
        token.role = user.role
      }

      // –î–ª—è OAuth providers –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ profile
      if (profile && (profile as any).email) {
        token.email = (profile as any).email
      }

      return token
    },
  },
  events: {
    async signIn(message) {
      const email = message.user?.email ?? ""
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`)
    },
  },
  pages: {
    signIn: '/auth/login',
    error: '/auth/error',
  },
  session: {
    strategy: "jwt",
  },
}

export default authOptions


