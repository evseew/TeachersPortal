#!/usr/bin/env tsx
/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ Pyrus API
 */

import { PyrusClientFactory } from '../lib/pyrus/client-factory'

async function checkResponseStructure() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ Pyrus API\n')
  
  const formsClient = PyrusClientFactory.createFormsClient()
  const baseClient = (formsClient as any).client || formsClient
  
  // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
  const response = await (baseClient as any).get(
    'forms/2304918/register?item_count=200&include_archived=n'
  )
  
  if (!response) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API')
    return
  }
  
  console.log('üì¶ –ö–æ—Ä–Ω–µ–≤—ã–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞ API:')
  console.log('=' .repeat(70))
  Object.keys(response).forEach(key => {
    const value = response[key]
    const type = Array.isArray(value) ? `Array[${value.length}]` : typeof value
    console.log(`  ${key}: ${type}`)
  })
  
  console.log('\nüìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:')
  console.log('=' .repeat(70))
  
  if (response.tasks) {
    console.log(`  ‚úÖ tasks: –º–∞—Å—Å–∏–≤ –∏–∑ ${response.tasks.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`)
  }
  
  if (response.next_cursor !== undefined) {
    console.log(`  ‚úÖ next_cursor: "${response.next_cursor}"`)
  } else {
    console.log(`  ‚ùå next_cursor: –û–¢–°–£–¢–°–¢–í–£–ï–¢`)
  }
  
  if (response.has_more !== undefined) {
    console.log(`  ‚ÑπÔ∏è  has_more: ${response.has_more}`)
  } else {
    console.log(`  ‚ùå has_more: –û–¢–°–£–¢–°–¢–í–£–ï–¢`)
  }
  
  if (response.next_task_id !== undefined) {
    console.log(`  ‚ÑπÔ∏è  next_task_id: ${response.next_task_id}`)
  } else {
    console.log(`  ‚ùå next_task_id: –û–¢–°–£–¢–°–¢–í–£–ï–¢`)
  }
  
  console.log('\nüîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤):')
  console.log('=' .repeat(70))
  console.log(JSON.stringify(response, null, 2).slice(0, 2000))
}

checkResponseStructure().catch(console.error)

