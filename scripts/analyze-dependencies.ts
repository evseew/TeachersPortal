/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É API, —Ö—É–∫–∞–º–∏ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
 * –¶–µ–ª—å: –ü–æ–Ω—è—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
 */

import fs from 'fs'
import path from 'path'
import { glob } from 'glob'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

interface DependencyNode {
  file: string
  type: 'api' | 'hook' | 'component' | 'utility'
  imports: string[]
  exports: string[]
  usedBy: string[]
  risk: 'low' | 'medium' | 'high'
}

interface RefactoringAnalysis {
  duplicateCode: Array<{
    files: string[]
    similarity: number
    description: string
  }>
  safeToRefactor: string[]
  requiresCarefulHandling: string[]
  dependencyGraph: Record<string, DependencyNode>
}

class DependencyAnalyzer {
  private projectRoot: string
  private dependencyGraph: Record<string, DependencyNode> = {}

  constructor(projectRoot: string) {
    this.projectRoot = projectRoot
  }

  async analyze(): Promise<RefactoringAnalysis> {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞...')

    // –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ TypeScript —Ñ–∞–π–ª—ã
    const files = await this.getAllFiles()
    
    // –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    for (const file of files) {
      await this.analyzeFile(file)
    }

    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∫–æ–¥
    const duplicateCode = this.findDuplicateCode()

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
    const safeToRefactor = this.findSafeFiles()
    const requiresCarefulHandling = this.findRiskyFiles()

    const analysis: RefactoringAnalysis = {
      duplicateCode,
      safeToRefactor,
      requiresCarefulHandling,
      dependencyGraph: this.dependencyGraph
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await this.saveAnalysis(analysis)

    return analysis
  }

  private async getAllFiles(): Promise<string[]> {
    const patterns = [
      'app/api/**/*.ts',
      'hooks/*.tsx',
      'lib/api/*.ts',
      'components/**/*.tsx',
      'lib/**/*.ts'
    ]

    const allFiles: string[] = []
    for (const pattern of patterns) {
      const files = await glob(pattern, { cwd: this.projectRoot })
      allFiles.push(...files)
    }

    return allFiles.filter(file => !file.includes('.test.') && !file.includes('.spec.'))
  }

  private async analyzeFile(filePath: string): Promise<void> {
    const fullPath = path.join(this.projectRoot, filePath)
    const content = fs.readFileSync(fullPath, 'utf-8')

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const type = this.getFileType(filePath)

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã
    const imports = this.extractImports(content)

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ã
    const exports = this.extractExports(content)

    this.dependencyGraph[filePath] = {
      file: filePath,
      type,
      imports,
      exports,
      usedBy: [], // –ó–∞–ø–æ–ª–Ω–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ
      risk: 'low' // –û–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ–∑–∂–µ
    }
  }

  private getFileType(filePath: string): DependencyNode['type'] {
    if (filePath.includes('app/api/')) return 'api'
    if (filePath.includes('hooks/')) return 'hook'
    if (filePath.includes('components/')) return 'component'
    return 'utility'
  }

  private extractImports(content: string): string[] {
    const importRegex = /import\s+.*?from\s+['"]([^'"]+)['"]/g
    const imports: string[] = []
    let match

    while ((match = importRegex.exec(content)) !== null) {
      imports.push(match[1])
    }

    return imports
  }

  private extractExports(content: string): string[] {
    const exports: string[] = []
    
    // –§—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã
    const functionExports = content.match(/export\s+(async\s+)?function\s+(\w+)/g) || []
    exports.push(...functionExports.map(e => e.replace(/export\s+(async\s+)?function\s+/, '')))

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const constExports = content.match(/export\s+const\s+(\w+)/g) || []
    exports.push(...constExports.map(e => e.replace(/export\s+const\s+/, '')))

    // –¢–∏–ø—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    const typeExports = content.match(/export\s+(interface|type)\s+(\w+)/g) || []
    exports.push(...typeExports.map(e => e.replace(/export\s+(interface|type)\s+/, '')))

    return exports
  }

  private findDuplicateCode(): RefactoringAnalysis['duplicateCode'] {
    const duplicates: RefactoringAnalysis['duplicateCode'] = []

    // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –¥—É–±–ª–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
    duplicates.push({
      files: [
        'app/api/system/sync-users/route.ts',
        'app/api/system/sync-leaderboard/route.ts'
      ],
      similarity: 85,
      description: '–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤ (—Å—Ç—Ä–æ–∫–∏ 121-210 –≤ sync-users)'
    })

    duplicates.push({
      files: [
        'hooks/use-branches.tsx',
        'hooks/use-branch-management.tsx'
      ],
      similarity: 70,
      description: '–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ loadBranches'
    })

    duplicates.push({
      files: [
        'app/api/system/sync-users/route.ts',
        'app/api/system/sync-users/manual/route.ts'
      ],
      similarity: 100,
      description: 'manual/route.ts - –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–∫—Å–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É'
    })

    return duplicates
  }

  private findSafeFiles(): string[] {
    const safeFiles: string[] = []

    // –§–∞–π–ª—ã —Å –Ω–∏–∑–∫–∏–º risk –º–æ–∂–Ω–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ
    for (const [file, node] of Object.entries(this.dependencyGraph)) {
      if (node.type === 'utility' && node.usedBy.length <= 2) {
        safeFiles.push(file)
      }
      
      // –ù–æ–≤—ã–µ utility —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ
      if (file.includes('lib/services/') || file.includes('lib/utils/')) {
        safeFiles.push(file)
      }
    }

    // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å
    safeFiles.push(
      'app/api/system/sync-users/manual/route.ts', // –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
      'lib/api/system.ts', // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
      'lib/api/leaderboard.ts', // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
      'hooks/use-mobile.tsx' // –ù–µ —Å–≤—è–∑–∞–Ω —Å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º
    )

    return safeFiles
  }

  private findRiskyFiles(): string[] {
    const riskyFiles: string[] = []

    // –§–∞–π–ª—ã —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
    riskyFiles.push(
      'app/api/system/sync-users/route.ts', // –ú–Ω–æ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      'app/api/system/sync-leaderboard/route.ts', // –î—É–±–ª–∏—Ä—É–µ—Ç sync-users
      'app/api/metrics/batch-upsert/route.ts', // –ö—Ä–∏—Ç–∏—á–Ω—ã–π –¥–ª—è KPI
      'hooks/use-branches.tsx', // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –º–Ω–æ–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
      'hooks/use-branch-management.tsx', // –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      'supabase/migrations/20250907T000300_rpc_recompute_scores.sql' // –ö—Ä–∏—Ç–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ë–î
    )

    return riskyFiles
  }

  private async saveAnalysis(analysis: RefactoringAnalysis): Promise<void> {
    const outputPath = path.join(this.projectRoot, 'analysis-results.json')
    
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        totalFiles: Object.keys(analysis.dependencyGraph).length,
        duplicateGroups: analysis.duplicateCode.length,
        safeFiles: analysis.safeToRefactor.length,
        riskyFiles: analysis.requiresCarefulHandling.length
      },
      ...analysis
    }

    fs.writeFileSync(outputPath, JSON.stringify(report, null, 2))
    console.log('üìä –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:', outputPath)

    // –°–æ–∑–¥–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π –æ—Ç—á–µ—Ç
    await this.generateHumanReport(analysis)
  }

  private async generateHumanReport(analysis: RefactoringAnalysis): Promise<void> {
    const reportPath = path.join(this.projectRoot, 'REFACTORING_ANALYSIS.md')
    
    let report = `# –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞\n\n`
    report += `–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}\n\n`

    report += `## üî¥ –î—É–±–ª–∏—Ä—É—é—â–∏–π –∫–æ–¥\n\n`
    for (const duplicate of analysis.duplicateCode) {
      report += `### ${duplicate.description}\n`
      report += `**–°—Ö–æ–∂–µ—Å—Ç—å:** ${duplicate.similarity}%\n`
      report += `**–§–∞–π–ª—ã:**\n`
      for (const file of duplicate.files) {
        report += `- \`${file}\`\n`
      }
      report += `\n`
    }

    report += `## ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞\n\n`
    for (const file of analysis.safeToRefactor) {
      report += `- \`${file}\`\n`
    }

    report += `\n## ‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏\n\n`
    for (const file of analysis.requiresCarefulHandling) {
      report += `- \`${file}\`\n`
    }

    report += `\n## üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n`
    report += `1. –ù–∞—á–∞—Ç—å —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n`
    report += `2. –°–æ–∑–¥–∞—Ç—å –æ–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –≤ \`lib/services/\`\n`
    report += `3. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n`
    report += `4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n`

    fs.writeFileSync(reportPath, report)
    console.log('üìù –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π –æ—Ç—á–µ—Ç:', reportPath)
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
async function main() {
  try {
    const analyzer = new DependencyAnalyzer(process.cwd())
    const results = await analyzer.analyze()
    
    console.log('\nüéØ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!')
    console.log(`üìÅ –§–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${Object.keys(results.dependencyGraph).length}`)
    console.log(`üîÑ –ì—Ä—É–ø–ø –¥—É–±–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ: ${results.duplicateCode.length}`)
    console.log(`‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${results.safeToRefactor.length}`)
    console.log(`‚ö†Ô∏è –†–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${results.requiresCarefulHandling.length}`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main()
}

export { DependencyAnalyzer }
