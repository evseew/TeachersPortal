#!/usr/bin/env tsx
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ Pyrus API
 */

import { PyrusClientFactory } from '../lib/pyrus/client-factory'

async function testPaginationSyntax() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ Pyrus API\n')
  
  const formsClient = PyrusClientFactory.createFormsClient()
  const baseClient = (formsClient as any).client || formsClient
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const response1 = await (baseClient as any).get(
    'forms/2304918/register?item_count=5&include_archived=n&sort=id'
  )
  
  if (!response1?.tasks?.length) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É')
    return
  }
  
  const lastTaskId = response1.tasks[response1.tasks.length - 1].id
  console.log(`üìä –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${response1.tasks.length} –∑–∞–¥–∞—á`)
  console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞ ID: ${lastTaskId}\n`)
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—ã
  const testCases = [
    { name: 'PostgREST —Å–∏–Ω—Ç–∞–∫—Å–∏—Å', url: `forms/2304918/register?item_count=5&include_archived=n&sort=id&id=lt.${lastTaskId}` },
    { name: 'max_task_id (—Å—Ç–∞—Ä—ã–π)', url: `forms/2304918/register?item_count=5&include_archived=n&max_task_id=${lastTaskId}` },
    { name: 'task_id —Å <', url: `forms/2304918/register?item_count=5&include_archived=n&sort=id&task_id<${lastTaskId}` },
    { name: 'modified_before (time)', url: `forms/2304918/register?item_count=5&include_archived=n&modified_before=${response1.tasks[response1.tasks.length - 1].last_modified_date}` },
    { name: 'id[lt]', url: `forms/2304918/register?item_count=5&include_archived=n&sort=id&id[lt]=${lastTaskId}` },
  ]
  
  for (const testCase of testCases) {
    console.log(`\nüß™ –¢–µ—Å—Ç: ${testCase.name}`)
    console.log(`   URL: ${testCase.url.substring(0, 80)}...`)
    
    try {
      const response = await (baseClient as any).get(testCase.url)
      
      if (response?.tasks?.length > 0) {
        const firstId = response.tasks[0].id
        console.log(`   ‚úÖ –£—Å–ø–µ—Ö! –ü–æ–ª—É—á–µ–Ω–æ ${response.tasks.length} –∑–∞–¥–∞—á`)
        console.log(`   üìå –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ ID: ${firstId}`)
        
        if (firstId < lastTaskId) {
          console.log(`   ‚úÖ Keyset —Ä–∞–±–æ—Ç–∞–µ—Ç: ${firstId} < ${lastTaskId}`)
        } else {
          console.log(`   ‚ö†Ô∏è  Keyset –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç: ${firstId} >= ${lastTaskId}`)
        }
      } else {
        console.log(`   ‚ö†Ô∏è  –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç`)
      }
    } catch (error: any) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    }
  }
}

testPaginationSyntax().catch(console.error)

