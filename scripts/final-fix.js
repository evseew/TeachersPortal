// –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ —Ç–∞–±–ª–∏—Ü–∞–º
import { createClient } from '@supabase/supabase-js'
import { readFileSync } from 'fs'

// –ß–∏—Ç–∞–µ–º credentials
const envContent = readFileSync('.env.local', 'utf-8')
const envLines = envContent.split('\n')
const env = {}

envLines.forEach(line => {
  const [key, value] = line.split('=')
  if (key && value) {
    env[key.trim()] = value.trim()
  }
})

const supabase = createClient(env.SUPABASE_URL, env.SUPABASE_SERVICE_ROLE, {
  auth: { persistSession: false }
})

console.log('üéØ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n')

async function fixCurrentScores() {
  console.log('1Ô∏è‚É£ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å—á—ë—Ç current_scores...')
  
  // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ current_scores
  const { error: deleteError } = await supabase
    .from('current_scores')
    .delete()
    .neq('id', '00000000-0000-0000-0000-000000000000') // –£–¥–∞–ª—è–µ–º –≤—Å–µ

  if (deleteError) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${deleteError.message}`)
    return false
  }
  console.log('  ‚úÖ current_scores –æ—á–∏—â–µ–Ω–∞')

  // 2. –ó–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
  const { data: teachers } = await supabase
    .from('profiles')
    .select(`
      user_id,
      full_name,
      teacher_metrics (
        return_pct,
        trial_pct,
        score
      )
    `)
    .eq('role', 'Teacher')

  if (teachers) {
    console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ ${teachers.length} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π`)
    
    const teacherScores = teachers
      .filter(t => t.teacher_metrics && t.teacher_metrics.length > 0)
      .map((teacher, index) => {
        const metrics = teacher.teacher_metrics[0]
        return {
          scope: 'teacher_overall',
          context: 'all',
          teacher_id: teacher.user_id,
          branch_id: null,
          score: metrics.score || 0,
          rank: index + 1, // –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–∞–Ω–≥
          updated_at: new Date().toISOString()
        }
      })
      .sort((a, b) => (b.score || 0) - (a.score || 0)) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score
      .map((score, index) => ({ ...score, rank: index + 1 })) // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–Ω–≥–∏

    if (teacherScores.length > 0) {
      const { error: insertError } = await supabase
        .from('current_scores')
        .insert(teacherScores)

      if (insertError) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ teacher scores: ${insertError.message}`)
      } else {
        console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${teacherScores.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π`)
      }
    }
  }

  // 3. –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–æ–≤
  const { data: branches } = await supabase
    .from('branch')
    .select('id, name')

  if (branches) {
    console.log(`  üè¢ –ù–∞–π–¥–µ–Ω–æ ${branches.length} —Ñ–∏–ª–∏–∞–ª–æ–≤`)
    
    const branchScores = []
    
    for (const branch of branches) {
      // –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —Ñ–∏–ª–∏–∞–ª—É
      const { data: branchTeachers } = await supabase
        .from('teacher_metrics')
        .select('score, last_year_base, trial_total')
        .eq('branch_id', branch.id)

      if (branchTeachers && branchTeachers.length > 0) {
        // –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
        let totalWeightedScore = 0
        let totalWeight = 0
        
        branchTeachers.forEach(tm => {
          const weight = (tm.last_year_base || 0) + (tm.trial_total || 0)
          if (weight > 0) {
            totalWeightedScore += (tm.score || 0) * weight
            totalWeight += weight
          }
        })
        
        const avgScore = totalWeight > 0 ? totalWeightedScore / totalWeight : 0
        
        branchScores.push({
          scope: 'branch_overall',
          context: 'all',
          teacher_id: null,
          branch_id: branch.id,
          score: Math.round(avgScore * 100) / 100, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
          rank: 0, // –ë—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω
          updated_at: new Date().toISOString()
        })
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–∞–Ω–≥–∏
    branchScores
      .sort((a, b) => (b.score || 0) - (a.score || 0))
      .forEach((score, index) => {
        score.rank = index + 1
      })

    if (branchScores.length > 0) {
      const { error: insertError } = await supabase
        .from('current_scores')
        .insert(branchScores)

      if (insertError) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ branch scores: ${insertError.message}`)
      } else {
        console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${branchScores.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ñ–∏–ª–∏–∞–ª–æ–≤`)
      }
    }
  }

  return true
}

async function createSimpleLeaderboardData() {
  console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤...')

  // Teacher leaderboard data
  const { data: teacherData, error: teacherError } = await supabase
    .from('current_scores')
    .select(`
      teacher_id,
      score,
      rank,
      profiles!inner (
        full_name,
        email,
        category,
        branch_id,
        branch (name)
      )
    `)
    .eq('scope', 'teacher_overall')
    .eq('context', 'all')
    .order('rank', { ascending: true })
    .limit(5)

  if (!teacherError && teacherData) {
    console.log('  üë®‚Äçüè´ –¢–û–ü-5 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:')
    teacherData.forEach((t, i) => {
      const profile = t.profiles
      const branchName = profile.branch?.name || '–ë–µ–∑ —Ñ–∏–ª–∏–∞–ª–∞'
      console.log(`    ${i + 1}. ${profile.full_name || profile.email} (${branchName}) - ${t.score} –±–∞–ª–ª–æ–≤`)
    })
  } else {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: ${teacherError?.message}`)
  }

  // Branch leaderboard data
  const { data: branchData, error: branchError } = await supabase
    .from('current_scores')
    .select(`
      branch_id,
      score,
      rank,
      branch!inner (name)
    `)
    .eq('scope', 'branch_overall')
    .eq('context', 'all')
    .order('rank', { ascending: true })
    .limit(5)

  if (!branchError && branchData) {
    console.log('  üè¢ –¢–û–ü-5 —Ñ–∏–ª–∏–∞–ª–æ–≤:')
    branchData.forEach((b, i) => {
      console.log(`    ${i + 1}. ${b.branch.name} - ${b.score} –±–∞–ª–ª–æ–≤`)
    })
  } else {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤: ${branchError?.message}`)
  }
}

async function updateApiEndpoints() {
  console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints...')

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API
  try {
    const response = await fetch('http://localhost:3000/api/leaderboard?type=teacher_overall')
    if (response.ok) {
      const data = await response.json()
      console.log(`  ‚úÖ Teacher API —Ä–∞–±–æ—Ç–∞–µ—Ç: ${data.length} –∑–∞–ø–∏—Å–µ–π`)
    } else {
      console.log(`  ‚ö†Ô∏è Teacher API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω)`)
    }
  } catch (e) {
    console.log(`  ‚ö†Ô∏è Teacher API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${e.message}`)
  }

  try {
    const response = await fetch('http://localhost:3000/api/leaderboard?type=branch_overall')
    if (response.ok) {
      const data = await response.json()
      console.log(`  ‚úÖ Branch API —Ä–∞–±–æ—Ç–∞–µ—Ç: ${data.length} –∑–∞–ø–∏—Å–µ–π`)
    } else {
      console.log(`  ‚ö†Ô∏è Branch API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`)
    }
  } catch (e) {
    console.log(`  ‚ö†Ô∏è Branch API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${e.message}`)
  }
}

async function createSnapshots() {
  console.log('\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤ –¥–ª—è –¥–µ–ª—å—Ç...')
  
  // –°–æ–∑–¥–∞—ë–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–Ω–∏–º–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
  const { data: allScores } = await supabase
    .from('current_scores')
    .select('*')

  if (allScores && allScores.length > 0) {
    const snapshots = allScores.map(score => ({
      scope: score.scope,
      context: score.context,
      teacher_id: score.teacher_id,
      branch_id: score.branch_id,
      score: score.score,
      rank: score.rank,
      created_at: new Date().toISOString()
    }))

    const { error } = await supabase
      .from('snapshots')
      .insert(snapshots)

    if (!error) {
      console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${snapshots.length} –±–∞–∑–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤`)
    } else {
      console.log(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–æ–≤: ${error.message}`)
    }
  }
}

async function main() {
  const success = await fixCurrentScores()
  
  if (success) {
    await createSimpleLeaderboardData()
    await updateApiEndpoints()
    await createSnapshots()
    
    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!')
    console.log('\nüìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:')
    console.log('  ‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏')
    console.log('  ‚úÖ –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª–∏–∞–ª–æ–≤')
    console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —Å–Ω–∏–º–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    console.log('  ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã API endpoints')
    
    console.log('\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:')
    console.log('  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run dev')
    console.log('  2. –û—Ç–∫—Ä–æ–π—Ç–µ /september-rating')
    console.log('  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /mass-kpi-input')
    console.log('  4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è KPI')
    
    console.log('\n‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:')
    console.log('  - VIEW api_v1.* —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å —á–µ—Ä–µ–∑ API')
    console.log('  - –ù–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç')
    console.log('  - –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å VIEW –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏')
    
  } else {
    console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
  }
}

main().catch(console.error)
