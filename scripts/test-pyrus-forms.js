#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ö Pyrus
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node scripts/test-pyrus-forms.js <form_id> <task_id>
 * 
 * –ü—Ä–∏–º–µ—Ä—ã:
 *   node scripts/test-pyrus-forms.js 2304918 283768656
 *   node scripts/test-pyrus-forms.js 792300 283768656
 * 
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:
 * 1. –°—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–µ–π –≤ –∑–∞–¥–∞—á–µ
 * 2. –ó–Ω–∞—á–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π (–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, —Ñ–∏–ª–∏–∞–ª, —Å—Ç–∞—Ç—É—Å "—É—á–∏—Ç—Å—è")
 * 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–æ–π –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π
 */

import { config } from 'dotenv'
import { fileURLToPath } from 'url'
import { dirname, join } from 'path'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)
config({ path: join(__dirname, '..', '.env.local') })

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–æ–ª–µ–π (–∏–∑ check_task.py)
const FORM_FIELDS = {
  2304918: {
    name: "–§–æ—Ä–º–∞ —Å—Ç–∞—Ä–∏—á–∫–æ–≤",
    fields: {
      teacher: 8,    // –ü–æ–ª–µ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
      branch: 5,     // –ü–æ–ª–µ —Å —Ñ–∏–ª–∏–∞–ª–æ–º  
      studying: 64,  // "–£–ß–ò–¢–°–Ø (–∑–∞–ø–æ–ª–Ω—è–µ—Ç –°–û)"
      status: 7,     // –°—Ç–∞—Ç—É—Å PE
      // –ü–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
      lesson1: 27,   // "–ü—Ä–æ—à–µ–ª –ª–∏ 1-–µ –∑–∞–Ω—è—Ç–∏–µ?"
      lesson2: 32,   // "–ü—Ä–æ—à–µ–ª –ª–∏ 2-–µ –∑–∞–Ω—è—Ç–∏–µ?"
      lesson3: 50,   // "–ü—Ä–æ—à–µ–ª –ª–∏ 3-–µ –∑–∞–Ω—è—Ç–∏–µ?"
      lesson4: 57,   // "–ü—Ä–æ—à–µ–ª –ª–∏ 4-–µ –∑–∞–Ω—è—Ç–∏–µ?"
      exitStatus: 25 // "–°—Ç–∞—Ç—É—Å –≤—ã—Ö–æ–¥–∞"
    }
  },
  792300: {
    name: "–§–æ—Ä–º–∞ –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç",
    fields: {
      teacher: 142,  // –ü–æ–ª–µ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
      branch: 226,   // –ü–æ–ª–µ —Å —Ñ–∏–ª–∏–∞–ª–æ–º
      studying: 187, // "–£–ß–ò–¢–°–Ø"
      status: 228,   // –°—Ç–∞—Ç—É—Å PE
      // –ü–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
      lesson1: 183,  // "–ü—Ä–∏—à–µ–ª –Ω–∞ 1-–µ –∑–∞–Ω—è—Ç–∏–µ?"
      lesson2: 198   // "–ü—Ä–∏—à–µ–ª –Ω–∞ 2-–µ –∑–∞–Ω—è—Ç–∏–µ?"
    }
  }
}

class PyrusFormsDebugger {
  constructor() {
    this.baseUrl = process.env.PYRUS_API_URL || 'https://api.pyrus.com/v4/'
    this.login = process.env.PYRUS_LOGIN
    this.securityKey = process.env.PYRUS_SECURITY_KEY
    this.accessToken = null
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Pyrus API
   */
  async authenticate() {
    if (!this.login || !this.securityKey) {
      throw new Error('–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è PYRUS_LOGIN –∏ PYRUS_SECURITY_KEY')
    }

    try {
      const response = await fetch(`${this.baseUrl}auth`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          login: this.login,
          security_key: this.securityKey
        })
      })

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${response.status}`)
      }

      const data = await response.json()
      this.accessToken = data.access_token
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Pyrus API')
      return this.accessToken
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`)
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏
   */
  async getTask(taskId) {
    if (!this.accessToken) {
      await this.authenticate()
    }

    try {
      const response = await fetch(`${this.baseUrl}tasks/${taskId}`, {
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json'
        }
      })

      if (!response.ok) {
        if (response.status === 401) {
          // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
          await this.authenticate()
          return this.getTask(taskId)
        }
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }

      const data = await response.json()
      return data.task
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error.message}`)
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
   */
  async getFormMeta(formId) {
    if (!this.accessToken) {
      await this.authenticate()
    }

    try {
      const response = await fetch(`${this.baseUrl}forms/${formId}`, {
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json'
        }
      })

      if (!response.ok) {
        if (response.status === 401) {
          await this.authenticate()
          return this.getFormMeta(formId)
        }
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }

      const data = await response.json()
      return data.form
    } catch (error) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: ${error.message}`)
      return null
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è (–ª–æ–≥–∏–∫–∞ –∏–∑ check_task.py)
   */
  getFieldValue(taskFields, fieldId) {
    for (const field of taskFields || []) {
      if (field.id === fieldId) {
        return field.value
      }
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏—è—Ö
      const value = field.value
      if (value && typeof value === 'object' && Array.isArray(value.fields)) {
        const nestedValue = this.getFieldValue(value.fields, fieldId)
        if (nestedValue !== null && nestedValue !== undefined) {
          return nestedValue
        }
      }
    }
    return null
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª—è
   */
  extractTextValue(fieldValue) {
    if (!fieldValue) return null
    
    if (typeof fieldValue === 'string') {
      return fieldValue
    }
    
    if (typeof fieldValue === 'object') {
      // –î–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
      if (fieldValue.checkmark) {
        return fieldValue.checkmark
      }
      // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
      return fieldValue.text || fieldValue.value || fieldValue.name || null
    }
    
    return null
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ "—É—á–∏—Ç—Å—è"
   */
  isStudying(taskFields, fieldId) {
    const value = this.getFieldValue(taskFields, fieldId)
    
    if (!value) return false
    
    // –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (typeof value === 'boolean') return value
    
    // –°—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (typeof value === 'string') {
      return ['–¥–∞', 'yes', 'true', 'checked'].includes(value.toLowerCase())
    }
    
    // –û–±—ä–µ–∫—Ç —Å —á–µ–∫–±–æ–∫—Å–æ–º
    if (typeof value === 'object' && value.checkmark === 'checked') {
      return true
    }
    
    return false
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏
   */
  async analyzeTask(formId, taskId) {
    console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É ${taskId} —Ñ–æ—Ä–º—ã ${formId}...`)
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const [taskData, formMeta] = await Promise.all([
        this.getTask(taskId),
        this.getFormMeta(formId)
      ])

      if (!taskData) {
        throw new Error(`–ó–∞–¥–∞—á–∞ ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
      }

      const formConfig = FORM_FIELDS[formId]
      if (!formConfig) {
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞: ${formId}`)
      }

      const taskFields = taskData.fields || []
      
      console.log('\n' + '='.repeat(80))
      console.log(`üìã –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß–ò PYRUS`)
      console.log('='.repeat(80))
      console.log(`üÜî ID –∑–∞–¥–∞—á–∏: ${taskId}`)
      console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${taskData.subject || taskData.text || `–ó–∞–¥–∞—á–∞ #${taskId}`}`)
      console.log(`üìÑ –§–æ—Ä–º–∞: ${formConfig.name} (ID: ${formId})`)
      console.log(`üîó –°—Å—ã–ª–∫–∞: https://pyrus.com/t#id${taskId}`)
      console.log(`üìä –ü–æ–ª–µ–π –≤ –∑–∞–¥–∞—á–µ: ${taskFields.length}`)
      
      // –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π
      console.log('\nüìã –í–ê–ñ–ù–´–ï –ü–û–õ–Ø:')
      const importantFields = {}
      
      for (const [fieldName, fieldId] of Object.entries(formConfig.fields)) {
        const value = this.getFieldValue(taskFields, fieldId)
        const textValue = this.extractTextValue(value)
        
        console.log(`   ${fieldName} (ID:${fieldId}): ${JSON.stringify(value)} -> "${textValue}"`)
        importantFields[fieldName] = { raw: value, text: textValue }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ "—É—á–∏—Ç—Å—è"
      const studyingStatus = this.isStudying(taskFields, formConfig.fields.studying)
      console.log(`\nüéì –°–¢–ê–¢–£–° "–£–ß–ò–¢–°–Ø": ${studyingStatus ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`)

      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –≤—Å–µ –ø–æ–ª—è
      console.log('\nüêõ –í–°–ï –ü–û–õ–Ø –ó–ê–î–ê–ß–ò:')
      taskFields.forEach(field => {
        console.log(`   ID:${field.id} "${field.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}": ${JSON.stringify(field.value)}`)
      })

      return {
        taskId,
        formId,
        formName: formConfig.name,
        taskTitle: taskData.subject || taskData.text || `–ó–∞–¥–∞—á–∞ #${taskId}`,
        fieldsCount: taskFields.length,
        importantFields,
        studyingStatus,
        allFields: taskFields.map(field => ({
          id: field.id,
          name: field.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
          value: field.value
        }))
      }

    } catch (error) {
      console.error(`‚ùå –û–®–ò–ë–ö–ê: ${error.message}`)
      return null
    }
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const args = process.argv.slice(2)
  
  if (args.length !== 2) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/test-pyrus-forms.js <form_id> <task_id>')
    console.log('–ü—Ä–∏–º–µ—Ä—ã:')
    console.log('  node scripts/test-pyrus-forms.js 2304918 283768656')
    console.log('  node scripts/test-pyrus-forms.js 792300 283768656')
    process.exit(1)
  }

  const [formIdStr, taskIdStr] = args
  const formId = parseInt(formIdStr, 10)
  const taskId = parseInt(taskIdStr, 10)

  if (isNaN(formId) || isNaN(taskId)) {
    console.error('‚ùå –û—à–∏–±–∫–∞: ID —Ñ–æ—Ä–º—ã –∏ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏')
    process.exit(1)
  }

  try {
    const formsDebugger = new PyrusFormsDebugger()
    const result = await formsDebugger.analyzeTask(formId, taskId)
    
    if (result) {
      console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ')
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      const fs = await import('fs/promises')
      const outputFile = `scripts/debug-task-${taskId}-form-${formId}.json`
      await fs.writeFile(outputFile, JSON.stringify(result, null, 2))
      console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputFile}`)
    }
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main()
}
