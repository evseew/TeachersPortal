#!/usr/bin/env node
/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

const fs = require('fs')
const path = require('path')

// –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ TypeScript –∫–æ–¥—É)
function getFieldValue(fieldList, fieldId) {
  if (!Array.isArray(fieldList)) {
    return null
  }

  for (const field of fieldList) {
    // –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ ID
    if (field.id === fieldId) {
      return field.value
    }

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö
    const value = field.value
    if (value && typeof value === 'object') {
      // –ü–æ–∏—Å–∫ –≤ –ø–æ–ª–µ fields (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è —Å–µ–∫—Ü–∏–π)
      if (Array.isArray(value.fields)) {
        const nestedValue = getFieldValue(value.fields, fieldId)
        if (nestedValue !== null && nestedValue !== undefined) {
          return nestedValue
        }
      }

      // –ü–æ–∏—Å–∫ –≤ –º–∞—Å—Å–∏–≤–µ items (–¥–ª—è —Ç–∞–±–ª–∏—Ü –∏ —Å–ø–∏—Å–∫–æ–≤)
      if (Array.isArray(value.items)) {
        for (const item of value.items) {
          if (Array.isArray(item.fields)) {
            const nestedValue = getFieldValue(item.fields, fieldId)
            if (nestedValue !== null && nestedValue !== undefined) {
              return nestedValue
            }
          }
        }
      }
    }

    // –ü–æ–∏—Å–∫ –≤ –º–∞—Å—Å–∏–≤–µ fields –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–ª—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
    if (Array.isArray(field.fields)) {
      const nestedValue = getFieldValue(field.fields, fieldId)
      if (nestedValue !== null && nestedValue !== undefined) {
        return nestedValue
      }
    }
  }

  return null
}

function extractPersonName(fieldValue) {
  if (!fieldValue) {
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
  }
  
  if (typeof fieldValue === 'string' && fieldValue.trim()) {
    return fieldValue.trim()
  }
  
  if (typeof fieldValue === 'object') {
    // –ü–æ–ª–µ person —Å first_name –∏ last_name (–æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç)
    if (fieldValue.first_name || fieldValue.last_name) {
      const firstName = (fieldValue.first_name || '').toString().trim()
      const lastName = (fieldValue.last_name || '').toString().trim()
      const fullName = `${firstName} ${lastName}`.trim()
      if (fullName && fullName !== '') {
        return fullName
      }
    }
    
    // –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏
    const possibleFields = ['text', 'name', 'value', 'display_name', 'full_name']
    for (const fieldName of possibleFields) {
      const nameValue = fieldValue[fieldName]
      if (typeof nameValue === 'string' && nameValue.trim()) {
        return nameValue.trim()
      }
    }
  }
  
  return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
}

function extractBranchName(fieldValue) {
  if (!fieldValue) {
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª"
  }
  
  if (typeof fieldValue === 'string' && fieldValue.trim()) {
    return fieldValue.trim()
  }
  
  if (typeof fieldValue === 'object') {
    // –ü–æ–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º values[0]
    if (Array.isArray(fieldValue.values) && fieldValue.values.length > 0) {
      return fieldValue.values[0]
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - rows[0][0]
    if (Array.isArray(fieldValue.rows) && 
        fieldValue.rows.length > 0 && 
        Array.isArray(fieldValue.rows[0]) && 
        fieldValue.rows[0].length > 0) {
      return fieldValue.rows[0][0]
    }
    
    // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    return fieldValue.text || fieldValue.name || fieldValue.value || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª"
  }
  
  return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª"
}

function isStudying(taskFields, fieldId) {
  const fieldValue = getFieldValue(taskFields, fieldId)
  
  if (!fieldValue) {
    return false
  }
  
  // –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (typeof fieldValue === 'boolean') {
    return fieldValue
  }
  
  // –°—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (typeof fieldValue === 'string') {
    return ['checked', '–¥–∞', 'yes', 'true'].includes(fieldValue.toLowerCase())
  }
  
  // –û–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º checkmark
  if (typeof fieldValue === 'object' && fieldValue.checkmark) {
    return fieldValue.checkmark === 'checked'
  }
  
  return false
}

// –°–∏–º—É–ª—è—Ü–∏—è extractTeacherData
function extractTeacherData(taskFields, taskId, fieldMapping) {
  const { teacherFieldId, branchFieldId, studyingFieldId } = fieldMapping
  
  return {
    name: extractPersonName(getFieldValue(taskFields, teacherFieldId)),
    branch: extractBranchName(getFieldValue(taskFields, branchFieldId)),
    isStudying: isStudying(taskFields, studyingFieldId),
    taskId
  }
}

function loadTaskData(formId) {
  const files = {
    2304918: 'debug-form-2304918-task-302953976.json',
    792300: 'debug-form-792300-task-307785818.json'
  }
  
  const filename = files[formId]
  if (!filename) {
    throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞: ${formId}`)
  }
  
  try {
    const filePath = path.join(__dirname, filename)
    const data = JSON.parse(fs.readFileSync(filePath, 'utf-8'))
    return data
  } catch (error) {
    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª ${filename}:`, error.message)
    return null
  }
}

function testIntegration() {
  console.log('üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢')
  console.log('='.repeat(60))
  
  // –ú–∞–ø–ø–∏–Ω–≥–∏ –ø–æ–ª–µ–π (–∫–∞–∫ –≤ PyrusSyncService)
  const FORM_2304918_FIELDS = {
    teacherFieldId: 8,    // –ü–æ–ª–µ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
    branchFieldId: 5,     // –ü–æ–ª–µ —Å —Ñ–∏–ª–∏–∞–ª–æ–º
    studyingFieldId: 64,  // –ü–æ–ª–µ "–£–ß–ò–¢–°–Ø (–∑–∞–ø–æ–ª–Ω—è–µ—Ç –°–û)"
    statusFieldId: 7      // –ü–æ–ª–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PE
  }

  const FORM_792300_FIELDS = {
    teacherFieldId: 142,  // –ü–æ–ª–µ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
    branchFieldId: 226,   // –ü–æ–ª–µ —Å —Ñ–∏–ª–∏–∞–ª–æ–º
    studyingFieldId: 187, // –ü–æ–ª–µ "—É—á–∏—Ç—Å—è"
    statusFieldId: 228    // –ü–æ–ª–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PE
  }
  
  // –¢–µ—Å—Ç —Ñ–æ—Ä–º—ã 2304918
  console.log('\nüìã –¢–ï–°–¢ –§–û–†–ú–´ 2304918 (—Å—Ç–∞—Ä–∏—á–∫–∏):')
  const task2304918 = loadTaskData(2304918)
  if (task2304918) {
    const teacherData = extractTeacherData(
      task2304918.fields, 
      task2304918.task_id, 
      FORM_2304918_FIELDS
    )
    
    console.log(`  ‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: "${teacherData.name}"`)
    console.log(`  ‚úÖ –§–∏–ª–∏–∞–ª: "${teacherData.branch}"`)
    console.log(`  ‚úÖ –£—á–∏—Ç—Å—è: ${teacherData.isStudying}`)
    console.log(`  ‚úÖ Task ID: ${teacherData.taskId}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const isValid = (
      teacherData.name !== "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" &&
      teacherData.branch !== "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª" &&
      typeof teacherData.isStudying === 'boolean'
    )
    
    console.log(`  ${isValid ? '‚úÖ' : '‚ùå'} –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: ${isValid ? '–ü–†–û–ô–î–ï–ù–û' : '–ü–†–û–í–ê–õ–ï–ù–û'}`)
  }
  
  // –¢–µ—Å—Ç —Ñ–æ—Ä–º—ã 792300
  console.log('\nüìã –¢–ï–°–¢ –§–û–†–ú–´ 792300 (–Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç):')
  const task792300 = loadTaskData(792300)
  if (task792300) {
    const teacherData = extractTeacherData(
      task792300.fields, 
      task792300.task_id, 
      FORM_792300_FIELDS
    )
    
    console.log(`  ‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: "${teacherData.name}"`)
    console.log(`  ‚úÖ –§–∏–ª–∏–∞–ª: "${teacherData.branch}"`)
    console.log(`  ‚úÖ –£—á–∏—Ç—Å—è: ${teacherData.isStudying}`)
    console.log(`  ‚úÖ Task ID: ${teacherData.taskId}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const isValid = (
      teacherData.name !== "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" &&
      teacherData.branch !== "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª" &&
      typeof teacherData.isStudying === 'boolean'
    )
    
    console.log(`  ${isValid ? '‚úÖ' : '‚ùå'} –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: ${isValid ? '–ü–†–û–ô–î–ï–ù–û' : '–ü–†–û–í–ê–õ–ï–ù–û'}`)
  }
  
  console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:')
  console.log('  ‚úÖ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
  console.log('  ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ person-–ø–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
  console.log('  ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ catalog-–ø–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
  console.log('  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
  console.log('  ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PyrusSyncService –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é')
  
  console.log('\nüöÄ –ì–û–¢–û–í–û –ö –ü–†–û–î–ê–ö–®–ï–ù–£!')
  console.log('   –¢–µ–ø–µ—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Pyrus –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ')
}

testIntegration()
