#!/usr/bin/env tsx
/**
 * –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ Pyrus API —Å –∫—É—Ä—Å–æ—Ä–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 * –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π Pyrus API v4
 * 
 * –ó–∞–ø—É—Å–∫: 
 * source .env.local && npx tsx scripts/debug-pyrus-api.ts
 * –∏–ª–∏
 * node --env-file=.env.local -r esbuild-register scripts/debug-pyrus-api.ts
 */

import { PyrusClientFactory } from '../lib/pyrus/client-factory'

async function debugPyrusAPI() {
  console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ Pyrus API (–∫—É—Ä—Å–æ—Ä–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è)\n')
  
  const formsClient = PyrusClientFactory.createFormsClient()
  const baseClient = (formsClient as any).client || formsClient
  
  console.log('üìã –§–æ—Ä–º–∞ 2304918 - –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:')
  console.log('=' .repeat(70))
  
  // –î–µ–ª–∞–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
  const response1 = await (baseClient as any).get(
    'forms/2304918/register?item_count=200&include_archived=n'
  )
  
  console.log('–û—Ç–≤–µ—Ç API:')
  console.log(`  tasks.length: ${response1?.tasks?.length || 0}`)
  console.log(`  next_cursor: ${response1?.next_cursor ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`)
  
  if (response1?.tasks?.length > 0) {
    console.log(`  –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ ID: ${response1.tasks[0].id}`)
    console.log(`  –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞ ID: ${response1.tasks[response1.tasks.length - 1].id}`)
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å next_cursor, –¥–µ–ª–∞–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å
  if (response1?.next_cursor) {
    console.log('\nüìã –§–æ—Ä–º–∞ 2304918 - –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—Å cursor):')
    console.log('=' .repeat(70))
    
    const response2 = await (baseClient as any).get(
      `forms/2304918/register?item_count=200&include_archived=n&cursor=${encodeURIComponent(response1.next_cursor)}`
    )
    
    console.log('–û—Ç–≤–µ—Ç API:')
    console.log(`  tasks.length: ${response2?.tasks?.length || 0}`)
    console.log(`  next_cursor: ${response2?.next_cursor ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`)
    
    if (response2?.tasks?.length > 0) {
      console.log(`  –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ ID: ${response2.tasks[0].id}`)
      console.log(`  –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞ ID: ${response2.tasks[response2.tasks.length - 1].id}`)
    }
  } else {
    console.log('\n‚úÖ API –ù–ï –í–ï–†–ù–£–õ next_cursor - —ç—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!')
    console.log('–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ –Ω–µ—Ç.')
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
  console.log('\nüîç –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:')
  console.log('=' .repeat(70))
  console.log(JSON.stringify(response1, null, 2).slice(0, 1000) + '...')
}

debugPyrusAPI().catch(console.error)


