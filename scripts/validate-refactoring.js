/**
 * –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
 */

const fs = require('fs')
const path = require('path')

console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞...')

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
const filesToCheck = [
  'lib/services/leaderboard-sync.service.ts',
  'lib/services/score-recomputation.service.ts', 
  'lib/services/branch.service.ts',
  'lib/clients/leaderboard.client.ts',
  'lib/clients/system.client.ts',
  'lib/middleware/api-error-handler.ts',
  'lib/middleware/auth-middleware.ts',
  'lib/middleware/performance-monitor.ts',
  'hooks/use-branch-operations.tsx',
  'hooks/use-api-state.tsx',
  'hooks/use-branches-v2.tsx',
  'hooks/use-branch-management-v2.tsx',
  'app/api/system/performance/route.ts'
]

// –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö API —Ñ–∞–π–ª–æ–≤
const updatedApiFiles = [
  'app/api/system/sync-leaderboard/route.ts',
  'app/api/metrics/batch-upsert/route.ts',
  'app/api/system/recompute-scores/route.ts'
]

// –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
const newMigrations = [
  'supabase/migrations/20250916T000000_optimized_recompute_function.sql'
]

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
function checkFileExists(filePath) {
  const fullPath = path.join(__dirname, '..', filePath)
  const exists = fs.existsSync(fullPath)
  
  if (exists) {
    console.log(`‚úÖ ${filePath}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
    const stats = fs.statSync(fullPath)
    if (stats.size === 0) {
      console.log(`‚ö†Ô∏è  ${filePath} - —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π`)
      return false
    }
    
    return true
  } else {
    console.log(`‚ùå ${filePath} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
function checkFileContent(filePath, expectedContent) {
  const fullPath = path.join(__dirname, '..', filePath)
  
  if (!fs.existsSync(fullPath)) {
    console.log(`‚ùå ${filePath} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ`)
    return false
  }
  
  const content = fs.readFileSync(fullPath, 'utf-8')
  const hasContent = expectedContent.every(text => content.includes(text))
  
  if (hasContent) {
    console.log(`‚úÖ ${filePath} - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º`)
    return true
  } else {
    console.log(`‚ö†Ô∏è  ${filePath} - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º`)
    expectedContent.forEach(text => {
      if (!content.includes(text)) {
        console.log(`   - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: "${text.substring(0, 50)}..."`)
      }
    })
    return false
  }
}

console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:')
const filesExist = filesToCheck.map(checkFileExists)

console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ API —Ñ–∞–π–ª—ã:')
const apiFilesExist = updatedApiFiles.map(checkFileExists)

console.log('\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏:')
const migrationsExist = newMigrations.map(checkFileExists)

console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:')

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ—Ä–≤–∏—Å–æ–≤
const serviceChecks = [
  {
    file: 'lib/services/leaderboard-sync.service.ts',
    expected: ['LeaderboardSyncService', 'syncTeacherData', 'removePhantomUsers', 'addMissingTeachers']
  },
  {
    file: 'lib/services/score-recomputation.service.ts',
    expected: ['ScoreRecomputationService', 'getInstance', 'recomputeIfNeeded', 'forceRecompute']
  },
  {
    file: 'lib/services/branch.service.ts',
    expected: ['BranchService', 'getInstance', 'listBranches', 'createBranch', 'updateBranch', 'deleteBranch']
  }
]

const contentChecks = serviceChecks.map(check => 
  checkFileContent(check.file, check.expected)
)

// –ü—Ä–æ–≤–µ—Ä—è–µ–º middleware
const middlewareChecks = [
  {
    file: 'lib/middleware/api-error-handler.ts',
    expected: ['ApiErrorHandler', 'withErrorHandler', 'safeApiCall']
  },
  {
    file: 'lib/middleware/auth-middleware.ts',
    expected: ['withAuth', 'withAdminAuth', 'withTeacherAuth', 'checkAuth']
  },
  {
    file: 'lib/middleware/performance-monitor.ts',
    expected: ['withPerformanceMonitoring', 'getOverallStats', 'exportMetrics']
  }
]

const middlewareContentChecks = middlewareChecks.map(check => 
  checkFileContent(check.file, check.expected)
)

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ API
const apiContentChecks = [
  {
    file: 'app/api/system/sync-leaderboard/route.ts',
    expected: ['LeaderboardSyncService', 'withAuth', 'withErrorHandler', 'withPerformanceMonitoring']
  },
  {
    file: 'app/api/metrics/batch-upsert/route.ts',
    expected: ['ScoreRecomputationService', 'recomputeIfNeeded']
  },
  {
    file: 'app/api/system/recompute-scores/route.ts',
    expected: ['ScoreRecomputationService', 'recomputeIfNeeded']
  }
].map(check => checkFileContent(check.file, check.expected))

console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:')

const allFilesExist = [...filesExist, ...apiFilesExist, ...migrationsExist].every(Boolean)
const allContentValid = [...contentChecks, ...middlewareContentChecks, ...apiContentChecks].every(Boolean)

console.log(`üìÅ –§–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç: ${allFilesExist ? '‚úÖ' : '‚ùå'} (${filesExist.filter(Boolean).length}/${filesExist.length})`)
console.log(`üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${allContentValid ? '‚úÖ' : '‚ö†Ô∏è'} (${[...contentChecks, ...middlewareContentChecks, ...apiContentChecks].filter(Boolean).length}/${[...contentChecks, ...middlewareContentChecks, ...apiContentChecks].length})`)

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–±–æ—Ä–∫–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç
console.log('\nüèóÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—é...')
try {
  const { execSync } = require('child_process')
  execSync('npx tsc --noEmit', { stdio: 'pipe' })
  console.log('‚úÖ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
} catch (error) {
  console.log('‚ùå TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞')
  console.log(error.stdout?.toString() || error.message)
}

console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:')

// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞
function countLines(filePath) {
  try {
    const fullPath = path.join(__dirname, '..', filePath)
    const content = fs.readFileSync(fullPath, 'utf-8')
    return content.split('\n').length
  } catch (error) {
    return 0
  }
}

const oldSyncLeaderboardLines = countLines('app/api/system/sync-leaderboard/route.ts')
const oldSyncUsersLines = countLines('app/api/system/sync-users/route.ts')

console.log(`üìè sync-leaderboard: ${oldSyncLeaderboardLines} —Å—Ç—Ä–æ–∫ (–±—ã–ª–æ ~100+)`)
console.log(`üìè sync-users: ${oldSyncUsersLines} —Å—Ç—Ä–æ–∫ (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ)`)

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
const documentationExists = [
  'ARCHITECTURE_V2.md',
  'CLEANUP_PLAN.md'
].map(checkFileExists)

console.log(`üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ${documentationExists.every(Boolean) ? '‚úÖ' : '‚ùå'}`)

// –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
const overallSuccess = allFilesExist && allContentValid
console.log('\n' + '='.repeat(50))
console.log(`üéâ –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê: ${overallSuccess ? '‚úÖ –£–°–ü–ï–®–ù–ê' : '‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}`)
console.log('='.repeat(50))

if (overallSuccess) {
  console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!')
  console.log('üìä –í—Å–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã')
  console.log('üõ†Ô∏è Middleware —Å–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç')
  console.log('üîß –°–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã')
  console.log('üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
  console.log('üîÑ Backward compatibility —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
} else {
  console.log('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã')
}

process.exit(overallSuccess ? 0 : 1)
