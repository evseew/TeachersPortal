#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Pyrus –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import asyncio
import os
import json
from typing import Dict, List, Any, Optional

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PYRUS_API_URL = "https://api.pyrus.com/v4/"
PYRUS_LOGIN = os.getenv("PYRUS_LOGIN")
PYRUS_SECURITY_KEY = os.getenv("PYRUS_SECURITY_KEY")

# –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∏–∑ —Ñ–∞–π–ª–∞ .env.local
if not PYRUS_LOGIN or not PYRUS_SECURITY_KEY:
    try:
        with open('.env.local', 'r') as f:
            for line in f:
                if line.startswith('PYRUS_LOGIN='):
                    PYRUS_LOGIN = line.split('=', 1)[1].strip()
                elif line.startswith('PYRUS_SECURITY_KEY='):
                    PYRUS_SECURITY_KEY = line.split('=', 1)[1].strip()
    except FileNotFoundError:
        pass

class SimplePyrusClient:
    def __init__(self):
        self.access_token = None
        
    async def authenticate(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Pyrus"""
        import aiohttp
        
        if not PYRUS_LOGIN or not PYRUS_SECURITY_KEY:
            raise Exception("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è PYRUS_LOGIN –∏ PYRUS_SECURITY_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{PYRUS_API_URL}auth",
                json={
                    "login": PYRUS_LOGIN,
                    "security_key": PYRUS_SECURITY_KEY
                }
            ) as response:
                if response.status != 200:
                    raise Exception(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status}")
                data = await response.json()
                self.access_token = data["access_token"]
                print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                return self.access_token
    
    async def get_form_tasks(self, form_id: int, limit: int = 5):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á —Ñ–æ—Ä–º—ã"""
        import aiohttp
        
        if not self.access_token:
            await self.authenticate()
            
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{PYRUS_API_URL}forms/{form_id}/register?item_count={limit}",
                headers={"Authorization": f"Bearer {self.access_token}"}
            ) as response:
                if response.status != 200:
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {response.status}")
                data = await response.json()
                return data.get("tasks", [])
    
    async def get_task(self, task_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        import aiohttp
        
        if not self.access_token:
            await self.authenticate()
            
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{PYRUS_API_URL}tasks/{task_id}",
                headers={"Authorization": f"Bearer {self.access_token}"}
            ) as response:
                if response.status != 200:
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {response.status}")
                data = await response.json()
                return data.get("task")

def get_field_value(task_fields: List[Dict[str, Any]], field_id: int) -> Any:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è –ø–æ ID"""
    for field in task_fields or []:
        if field.get("id") == field_id:
            return field.get("value")
    return None

def analyze_field_structure(task_fields: List[Dict[str, Any]], form_id: int):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–ª–µ–π"""
    
    # –í–∞–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–æ—Ä–º—ã
    important_fields = {
        2304918: {
            8: "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
            5: "–§–∏–ª–∏–∞–ª", 
            64: "–£–ß–ò–¢–°–Ø (–∑–∞–ø–æ–ª–Ω—è–µ—Ç –°–û)",
            7: "–°—Ç–∞—Ç—É—Å PE",
            27: "–ü—Ä–æ—à–µ–ª –ª–∏ 1-–µ –∑–∞–Ω—è—Ç–∏–µ?",
            32: "–ü—Ä–æ—à–µ–ª –ª–∏ 2-–µ –∑–∞–Ω—è—Ç–∏–µ?",
            25: "–°—Ç–∞—Ç—É—Å –≤—ã—Ö–æ–¥–∞"
        },
        792300: {
            142: "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
            226: "–§–∏–ª–∏–∞–ª",
            187: "–£–ß–ò–¢–°–Ø",
            228: "–°—Ç–∞—Ç—É—Å PE",
            183: "–ü—Ä–∏—à–µ–ª –Ω–∞ 1-–µ –∑–∞–Ω—è—Ç–∏–µ?",
            198: "–ü—Ä–∏—à–µ–ª –Ω–∞ 2-–µ –∑–∞–Ω—è—Ç–∏–µ?"
        }
    }
    
    print(f"\nüìã –ê–ù–ê–õ–ò–ó –í–ê–ñ–ù–´–• –ü–û–õ–ï–ô –§–û–†–ú–´ {form_id}:")
    fields_config = important_fields.get(form_id, {})
    
    for field_id, field_name in fields_config.items():
        value = get_field_value(task_fields, field_id)
        print(f"  ID:{field_id:3d} {field_name:30s} = {json.dumps(value, ensure_ascii=False)}")
    
    print(f"\nüêõ –í–°–ï –ü–û–õ–Ø –ó–ê–î–ê–ß–ò:")
    for field in task_fields[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª–µ–π
        field_id = field.get("id")
        field_name = field.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        field_value = field.get("value")
        print(f"  ID:{field_id:3d} {field_name:30s} = {json.dumps(field_value, ensure_ascii=False)}")
    
    if len(task_fields) > 10:
        print(f"  ... –∏ –µ—â–µ {len(task_fields) - 10} –ø–æ–ª–µ–π")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    client = SimplePyrusClient()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á –∏–∑ –æ–±–µ–∏—Ö —Ñ–æ—Ä–º
        print("üîç –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á...")
        
        for form_id in [2304918, 792300]:
            form_name = "—Å—Ç–∞—Ä–∏—á–∫–∏" if form_id == 2304918 else "–Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç"
            print(f"\n{'='*60}")
            print(f"üìã –§–û–†–ú–ê {form_id} ({form_name})")
            print(f"{'='*60}")
            
            try:
                tasks = await client.get_form_tasks(form_id, 2)
                
                if not tasks:
                    print(f"‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –≤ —Ñ–æ—Ä–º–µ {form_id}")
                    continue
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
                task = tasks[0]
                task_id = task.get("id")
                print(f"üÜî –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É: {task_id}")
                print(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {task.get('subject', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                full_task = await client.get_task(task_id)
                if full_task:
                    task_fields = full_task.get("fields", [])
                    print(f"üìä –ü–æ–ª–µ–π –≤ –∑–∞–¥–∞—á–µ: {len(task_fields)}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–µ–π
                    analyze_field_structure(task_fields, form_id)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result_file = f"scripts/debug-form-{form_id}-task-{task_id}.json"
                    with open(result_file, 'w', encoding='utf-8') as f:
                        json.dump({
                            "form_id": form_id,
                            "task_id": task_id,
                            "task_title": task.get('subject', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            "fields": task_fields
                        }, f, ensure_ascii=False, indent=2)
                    print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {result_file}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã {form_id}: {e}")
                
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ aiohttp
    try:
        import aiohttp
    except ImportError:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å aiohttp: pip install aiohttp")
        exit(1)
    
    asyncio.run(main())
