#!/usr/bin/env npx tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö TeachersPortal
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç orphaned –∑–∞–ø–∏—Å–∏, –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ constraints
 */

import { createClient } from '@supabase/supabase-js'

// Credentials –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const supabaseUrl = process.env.SUPABASE_URL
const supabaseServiceRole = process.env.SUPABASE_SERVICE_ROLE

if (!supabaseUrl || !supabaseServiceRole) {
  console.error('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceRole, {
  auth: { persistSession: false }
})

interface IntegrityReport {
  table: string
  issue: string
  count: number
  details?: any[]
}

async function checkTableExists(tableName: string): Promise<boolean> {
  const { data, error } = await supabase
    .from('information_schema.tables')
    .select('table_name')
    .eq('table_schema', 'public')
    .eq('table_name', tableName)
  
  return !error && data && data.length > 0
}

async function checkOrphanedCurrentScores(): Promise<IntegrityReport[]> {
  const issues: IntegrityReport[] = []

  // Orphaned teacher_id –≤ current_scores (–Ω–µ—Ç –≤ profiles)
  const { data: orphanedTeachers, error: teacherError } = await supabase.rpc('check_orphaned_current_scores_teachers')
  if (!teacherError && orphanedTeachers) {
    issues.push({
      table: 'current_scores',
      issue: 'Orphaned teacher_id (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ profiles)',
      count: Array.isArray(orphanedTeachers) ? orphanedTeachers.length : orphanedTeachers,
      details: Array.isArray(orphanedTeachers) ? orphanedTeachers : []
    })
  }

  // Orphaned branch_id –≤ current_scores (–Ω–µ—Ç –≤ branch)
  const { data: orphanedBranches, error: branchError } = await supabase.rpc('check_orphaned_current_scores_branches')
  if (!branchError && orphanedBranches) {
    issues.push({
      table: 'current_scores',
      issue: 'Orphaned branch_id (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ branch)',
      count: Array.isArray(orphanedBranches) ? orphanedBranches.length : orphanedBranches,
      details: Array.isArray(orphanedBranches) ? orphanedBranches : []
    })
  }

  return issues
}

async function checkOrphanedTeacherMetrics(): Promise<IntegrityReport[]> {
  const issues: IntegrityReport[] = []

  // Orphaned teacher_id –≤ teacher_metrics (–Ω–µ—Ç –≤ profiles)
  const { data, error } = await supabase
    .from('teacher_metrics')
    .select(`
      teacher_id,
      profiles!inner(user_id)
    `)
  
  if (!error) {
    const orphaned = data?.filter(tm => !tm.profiles) || []
    if (orphaned.length > 0) {
      issues.push({
        table: 'teacher_metrics',
        issue: 'Orphaned teacher_id (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ profiles)',
        count: orphaned.length,
        details: orphaned.map(o => o.teacher_id)
      })
    }
  }

  return issues
}

async function checkDuplicateCurrentScores(): Promise<IntegrityReport[]> {
  const issues: IntegrityReport[] = []

  // –î—É–±–ª–∏ –≤ current_scores –ø–æ scope/context/teacher_id
  const { data, error } = await supabase.rpc('check_duplicate_current_scores')
  if (!error && data) {
    issues.push({
      table: 'current_scores',
      issue: '–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ scope/context/teacher_id',
      count: Array.isArray(data) ? data.length : data,
      details: Array.isArray(data) ? data : []
    })
  }

  return issues
}

async function checkMissingTeachersInCurrentScores(): Promise<IntegrityReport[]> {
  const issues: IntegrityReport[] = []

  // –£—á–∏—Ç–µ–ª—è –∏–∑ profiles, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ current_scores
  const { data, error } = await supabase
    .from('profiles')
    .select('user_id, full_name, email')
    .eq('role', 'Teacher')

  if (!error && data) {
    const { data: currentScores } = await supabase
      .from('current_scores')
      .select('teacher_id')
      .eq('scope', 'teacher_overall')
      .eq('context', 'all')

    const existingTeacherIds = new Set(currentScores?.map(cs => cs.teacher_id) || [])
    const missingTeachers = data.filter(t => !existingTeacherIds.has(t.user_id))

    if (missingTeachers.length > 0) {
      issues.push({
        table: 'current_scores',
        issue: '–£—á–∏—Ç–µ–ª—è –∏–∑ profiles –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ current_scores',
        count: missingTeachers.length,
        details: missingTeachers
      })
    }
  }

  return issues
}

async function checkTableCounts(): Promise<void> {
  console.log('\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:')
  
  const tables = ['profiles', 'branch', 'teacher_metrics', 'current_scores', 'snapshots']
  
  for (const table of tables) {
    const { count, error } = await supabase
      .from(table)
      .select('*', { count: 'exact', head: true })
    
    if (!error) {
      console.log(`  ${table}: ${count || 0} –∑–∞–ø–∏—Å–µ–π`)
    } else {
      console.log(`  ${table}: ‚ùå –æ—à–∏–±–∫–∞ - ${error.message}`)
    }
  }
}

async function checkViewsAndFunctions(): Promise<void> {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ VIEW –∏ —Ñ—É–Ω–∫—Ü–∏–π:')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ VIEW
  const views = [
    'api_v1.vw_leaderboard_teacher_overall_all',
    'api_v1.vw_leaderboard_branch_overall_all'
  ]
  
  for (const view of views) {
    try {
      const { data, error } = await supabase
        .from(view)
        .select('*', { count: 'exact', head: true })
      
      if (!error) {
        console.log(`  ‚úÖ ${view}: ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π`)
      } else {
        console.log(`  ‚ùå ${view}: ${error.message}`)
      }
    } catch (e) {
      console.log(`  ‚ùå ${view}: –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω`)
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º RPC —Ñ—É–Ω–∫—Ü–∏–∏
  const functions = ['ensure_profile', 'metrics_batch_upsert', 'recompute_current_scores']
  
  for (const func of functions) {
    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å —Å –ø—É—Å—Ç—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
      const { error } = await supabase.rpc(func, {})
      
      if (error && error.message.includes('function') && error.message.includes('does not exist')) {
        console.log(`  ‚ùå ${func}: —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
      } else {
        console.log(`  ‚úÖ ${func}: —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞`)
      }
    } catch (e) {
      console.log(`  ‚ö†Ô∏è ${func}: ${e}`)
    }
  }
}

async function main() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n')

  try {
    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const { data, error } = await supabase.from('profiles').select('user_id').limit(1)
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message)
      return
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ')

    await checkTableCounts()
    await checkViewsAndFunctions()

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    const allIssues: IntegrityReport[] = []
    
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...')
    
    const orphanedCurrentScores = await checkOrphanedCurrentScores()
    const orphanedTeacherMetrics = await checkOrphanedTeacherMetrics()
    const duplicateCurrentScores = await checkDuplicateCurrentScores()
    const missingTeachers = await checkMissingTeachersInCurrentScores()
    
    allIssues.push(...orphanedCurrentScores, ...orphanedTeacherMetrics, ...duplicateCurrentScores, ...missingTeachers)

    // –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    console.log('\nüìã –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:')
    if (allIssues.length === 0) {
      console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
    } else {
      allIssues.forEach((issue, index) => {
        console.log(`\n${index + 1}. ${issue.table}`)
        console.log(`   –ü—Ä–æ–±–ª–µ–º–∞: ${issue.issue}`)
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${issue.count}`)
        if (issue.details && issue.details.length > 0 && issue.details.length <= 10) {
          console.log(`   –î–µ—Ç–∞–ª–∏:`, issue.details)
        } else if (issue.count > 10) {
          console.log(`   (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞)`)
        }
      })

      console.log(`\n‚ùå –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${allIssues.length} —Ç–∏–ø–æ–≤ –ø—Ä–æ–±–ª–µ–º`)
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

main().catch(console.error)
