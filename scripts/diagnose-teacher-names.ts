/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
 * –º–µ–∂–¥—É Pyrus –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–∞–ª–∞
 * 
 * –ó–∞–ø—É—Å–∫: SUPABASE_URL=xxx SUPABASE_SERVICE_ROLE_KEY=xxx npx tsx scripts/diagnose-teacher-names.ts
 */

import { createClient } from '@supabase/supabase-js'

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
const supabaseUrl = process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabaseAdmin = createClient(supabaseUrl, supabaseKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

async function diagnoseTeacherNames() {
  try {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–º–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π...\n')

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { data: profiles, error: profilesError } = await supabaseAdmin
      .from('profiles')
      .select('user_id, full_name, email, created_at')
      .eq('role', 'Teacher')
      .order('full_name')

    if (profilesError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: ${profilesError.message}`)
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${profiles?.length || 0} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n`)
    
    profiles?.forEach((profile, index) => {
      console.log(`${(index + 1).toString().padStart(2, '0')}. "${profile.full_name}" (${profile.email})`)
    })

    console.log('\n' + '='.repeat(60))

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ teacher_metrics (–∫—Ç–æ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω)
    const { data: metrics, error: metricsError } = await supabaseAdmin
      .from('teacher_metrics')
      .select(`
        teacher_id,
        last_year_base,
        last_year_returned,
        trial_total,
        trial_converted,
        updated_at,
        updated_by
      `)
      .not('last_year_base', 'is', null)
      .or('last_year_returned.gt.0,trial_converted.gt.0')

    if (metricsError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: ${metricsError.message}`)
    }

    console.log(`\nüìà –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (${metrics?.length || 0}):\n`)

    if (metrics && metrics.length > 0) {
      // –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –¥–ª—è —ç—Ç–∏—Ö ID
      const teacherIds = metrics.map(m => m.teacher_id)
      const { data: syncedProfiles } = await supabaseAdmin
        .from('profiles')
        .select('user_id, full_name')
        .in('user_id', teacherIds)

      const profileMap = new Map(syncedProfiles?.map(p => [p.user_id, p.full_name]) || [])

      metrics.forEach((metric, index) => {
        const name = profileMap.get(metric.teacher_id) || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        console.log(`${(index + 1).toString().padStart(2, '0')}. "${name}"`)
        console.log(`    –°—Ç–∞—Ä–∏—á–∫–∏: ${metric.last_year_returned}/${metric.last_year_base} (${Math.round((metric.last_year_returned / metric.last_year_base) * 100)}%)`)
        console.log(`    Trial: ${metric.trial_converted}/${metric.trial_total}`)
        console.log(`    –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${metric.updated_at} (${metric.updated_by})`)
        console.log('')
      })
    } else {
      console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
    }

    console.log('\n' + '='.repeat(60))
    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseTeacherNames().then(() => {
  process.exit(0)
}).catch((error) => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  process.exit(1)
})
