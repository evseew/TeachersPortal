#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

const fs = require('fs')
const path = require('path')

// –§—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π (–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ TypeScript)
function getFieldValue(fieldList, fieldId) {
  if (!Array.isArray(fieldList)) {
    return null
  }

  for (const field of fieldList) {
    // –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ ID
    if (field.id === fieldId) {
      return field.value
    }

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö
    const value = field.value
    if (value && typeof value === 'object') {
      // –ü–æ–∏—Å–∫ –≤ –ø–æ–ª–µ fields (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è —Å–µ–∫—Ü–∏–π)
      if (Array.isArray(value.fields)) {
        const nestedValue = getFieldValue(value.fields, fieldId)
        if (nestedValue !== null && nestedValue !== undefined) {
          return nestedValue
        }
      }

      // –ü–æ–∏—Å–∫ –≤ –º–∞—Å—Å–∏–≤–µ items (–¥–ª—è —Ç–∞–±–ª–∏—Ü –∏ —Å–ø–∏—Å–∫–æ–≤)
      if (Array.isArray(value.items)) {
        for (const item of value.items) {
          if (Array.isArray(item.fields)) {
            const nestedValue = getFieldValue(item.fields, fieldId)
            if (nestedValue !== null && nestedValue !== undefined) {
              return nestedValue
            }
          }
        }
      }
    }

    // –ü–æ–∏—Å–∫ –≤ –º–∞—Å—Å–∏–≤–µ fields –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–ª—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
    if (Array.isArray(field.fields)) {
      const nestedValue = getFieldValue(field.fields, fieldId)
      if (nestedValue !== null && nestedValue !== undefined) {
        return nestedValue
      }
    }
  }

  return null
}

function extractTextValue(fieldValue) {
  if (!fieldValue) {
    return null
  }
  
  // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (typeof fieldValue === 'string') {
    return fieldValue
  }
  
  // –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (typeof fieldValue === 'number') {
    return fieldValue.toString()
  }
  
  if (typeof fieldValue === 'object') {
    // –ü–æ–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ (catalog) - –∏—Å–ø–æ–ª—å–∑—É–µ–º values[0] –∏–ª–∏ text
    if (Array.isArray(fieldValue.values) && fieldValue.values.length > 0) {
      return fieldValue.values[0]
    }
    
    // –ü–æ–ª—è –≤—ã–±–æ—Ä–∞ (multiple_choice) - –∏—Å–ø–æ–ª—å–∑—É–µ–º choice_names[0]
    if (Array.isArray(fieldValue.choice_names) && fieldValue.choice_names.length > 0) {
      return fieldValue.choice_names[0]
    }
    
    // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã
    return fieldValue.text || fieldValue.value || fieldValue.name || null
  }
  
  return null
}

function isCheckboxChecked(fieldValue) {
  if (!fieldValue) {
    return false
  }
  
  // –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (typeof fieldValue === 'boolean') {
    return fieldValue
  }
  
  // –°—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (typeof fieldValue === 'string') {
    return ['checked', '–¥–∞', 'yes', 'true'].includes(fieldValue.toLowerCase())
  }
  
  // –û–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º checkmark
  if (typeof fieldValue === 'object' && fieldValue.checkmark) {
    return fieldValue.checkmark === 'checked'
  }
  
  return false
}

function extractPersonName(fieldValue) {
  if (!fieldValue) {
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
  }
  
  if (typeof fieldValue === 'string') {
    return fieldValue.trim()
  }
  
  if (typeof fieldValue === 'object') {
    // –ü–æ–ª–µ person —Å first_name –∏ last_name
    if (fieldValue.first_name || fieldValue.last_name) {
      const firstName = (fieldValue.first_name || '').toString().trim()
      const lastName = (fieldValue.last_name || '').toString().trim()
      const fullName = `${firstName} ${lastName}`.trim()
      if (fullName && fullName !== '') {
        return fullName
      }
    }
    
    // –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏
    const possibleFields = ['text', 'name', 'value', 'display_name', 'full_name']
    for (const fieldName of possibleFields) {
      const nameValue = fieldValue[fieldName]
      if (typeof nameValue === 'string' && nameValue.trim()) {
        return nameValue.trim()
      }
    }
  }
  
  return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
}

function extractBranchName(fieldValue) {
  if (!fieldValue) {
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª"
  }
  
  if (typeof fieldValue === 'string') {
    return fieldValue.trim()
  }
  
  if (typeof fieldValue === 'object') {
    // –ü–æ–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º values[0]
    if (Array.isArray(fieldValue.values) && fieldValue.values.length > 0) {
      return fieldValue.values[0]
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - rows[0][0]
    if (Array.isArray(fieldValue.rows) && 
        fieldValue.rows.length > 0 && 
        Array.isArray(fieldValue.rows[0]) && 
        fieldValue.rows[0].length > 0) {
      return fieldValue.rows[0][0]
    }
    
    // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    return fieldValue.text || fieldValue.name || fieldValue.value || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª"
  }
  
  return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª"
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
function loadTaskData(formId) {
  const files = {
    2304918: 'debug-form-2304918-task-302953976.json',
    792300: 'debug-form-792300-task-307785818.json'
  }
  
  const filename = files[formId]
  if (!filename) {
    throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞: ${formId}`)
  }
  
  try {
    const filePath = path.join(__dirname, filename)
    const data = JSON.parse(fs.readFileSync(filePath, 'utf-8'))
    return data
  } catch (error) {
    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª ${filename}:`, error.message)
    return null
  }
}

function testForm2304918() {
  console.log('\n' + '='.repeat(60))
  console.log('üß™ –¢–ï–°–¢ –§–û–†–ú–´ 2304918 (—Å—Ç–∞—Ä–∏—á–∫–∏)')
  console.log('='.repeat(60))
  
  const taskData = loadTaskData(2304918)
  if (!taskData) return
  
  const fields = taskData.fields
  console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª–µ–π: ${fields.length}`)
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è
  const fieldTests = {
    8: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
    5: '–§–∏–ª–∏–∞–ª', 
    64: '–£–ß–ò–¢–°–Ø (–∑–∞–ø–æ–ª–Ω—è–µ—Ç –°–û)',
    7: '–°—Ç–∞—Ç—É—Å PE',
    27: '–ü—Ä–∏—à–µ–ª –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ?',
    25: '–°—Ç–∞—Ç—É—Å –≤—ã—Ö–æ–¥–∞'
  }
  
  console.log('\nüîç –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ü–û–õ–ï–ô:')
  for (const [fieldId, fieldName] of Object.entries(fieldTests)) {
    const id = parseInt(fieldId, 10)
    const rawValue = getFieldValue(fields, id)
    const textValue = extractTextValue(rawValue)
    const isChecked = isCheckboxChecked(rawValue)
    
    console.log(`\n  ID:${id.toString().padStart(2)} ${fieldName}`)
    console.log(`    Raw: ${JSON.stringify(rawValue)}`)
    console.log(`    Text: "${textValue}"`)
    console.log(`    Checked: ${isChecked}`)
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    if (id === 8) { // –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
      const teacherName = extractPersonName(rawValue)
      console.log(`    Person: "${teacherName}"`)
    }
    
    if (id === 5) { // –§–∏–ª–∏–∞–ª
      const branchName = extractBranchName(rawValue)
      console.log(`    Branch: "${branchName}"`)
    }
  }
}

function testForm792300() {
  console.log('\n' + '='.repeat(60))
  console.log('üß™ –¢–ï–°–¢ –§–û–†–ú–´ 792300 (–Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç)')
  console.log('='.repeat(60))
  
  const taskData = loadTaskData(792300)
  if (!taskData) return
  
  const fields = taskData.fields
  console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª–µ–π: ${fields.length}`)
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è
  const fieldTests = {
    142: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
    226: '–§–∏–ª–∏–∞–ª',
    187: '–£–ß–ò–¢–°–Ø',
    228: '–°—Ç–∞—Ç—É—Å PE',
    183: '–ü—Ä–∏—à–µ–ª –Ω–∞ 1-–µ –∑–∞–Ω—è—Ç–∏–µ?',
    198: '–ü—Ä–∏—à–µ–ª –Ω–∞ 2-–µ –∑–∞–Ω—è—Ç–∏–µ?'
  }
  
  console.log('\nüîç –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ü–û–õ–ï–ô:')
  for (const [fieldId, fieldName] of Object.entries(fieldTests)) {
    const id = parseInt(fieldId, 10)
    const rawValue = getFieldValue(fields, id)
    const textValue = extractTextValue(rawValue)
    const isChecked = isCheckboxChecked(rawValue)
    
    console.log(`\n  ID:${id.toString().padStart(3)} ${fieldName}`)
    console.log(`    Raw: ${JSON.stringify(rawValue)}`)
    console.log(`    Text: "${textValue}"`)
    console.log(`    Checked: ${isChecked}`)
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    if (id === 142) { // –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
      const teacherName = extractPersonName(rawValue)
      console.log(`    Person: "${teacherName}"`)
    }
    
    if (id === 226) { // –§–∏–ª–∏–∞–ª
      const branchName = extractBranchName(rawValue)
      console.log(`    Branch: "${branchName}"`)
    }
  }
}

function main() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ü–û–õ–ï–ô PYRUS')
  
  try {
    testForm2304918()
    testForm792300()
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message)
  }
}

main()
