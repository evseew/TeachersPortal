#!/usr/bin/env ts-node
/**
 * –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

import { readFileSync } from 'fs'
import { join } from 'path'
import { 
  getFieldValue, 
  extractTextValue, 
  isCheckboxChecked, 
  extractPersonName, 
  extractBranchName,
  isStudying,
  extractTeacher,
  extractBranch,
  PyrusField
} from '../lib/pyrus/field-extractor'

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
function loadTaskData(formId: number): any {
  const files = {
    2304918: 'debug-form-2304918-task-302953976.json',
    792300: 'debug-form-792300-task-307785818.json'
  }
  
  const filename = files[formId as keyof typeof files]
  if (!filename) {
    throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞: ${formId}`)
  }
  
  try {
    const filePath = join(__dirname, filename)
    const data = JSON.parse(readFileSync(filePath, 'utf-8'))
    return data
  } catch (error) {
    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª ${filename}:`, error)
    return null
  }
}

function testForm2304918() {
  console.log('\n' + '='.repeat(60))
  console.log('üß™ –¢–ï–°–¢ –§–û–†–ú–´ 2304918 (—Å—Ç–∞—Ä–∏—á–∫–∏)')
  console.log('='.repeat(60))
  
  const taskData = loadTaskData(2304918)
  if (!taskData) return
  
  const fields: PyrusField[] = taskData.fields
  console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª–µ–π: ${fields.length}`)
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è
  const fieldTests = {
    8: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
    5: '–§–∏–ª–∏–∞–ª', 
    64: '–£–ß–ò–¢–°–Ø (–∑–∞–ø–æ–ª–Ω—è–µ—Ç –°–û)',
    7: '–°—Ç–∞—Ç—É—Å PE',
    27: '–ü—Ä–∏—à–µ–ª –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ?',
    25: '–°—Ç–∞—Ç—É—Å –≤—ã—Ö–æ–¥–∞'
  }
  
  console.log('\nüîç –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ü–û–õ–ï–ô:')
  for (const [fieldId, fieldName] of Object.entries(fieldTests)) {
    const id = parseInt(fieldId, 10)
    const rawValue = getFieldValue(fields, id)
    const textValue = extractTextValue(rawValue)
    const isChecked = isCheckboxChecked(rawValue)
    
    console.log(`\n  ID:${id.toString().padStart(2)} ${fieldName}`)
    console.log(`    Raw: ${JSON.stringify(rawValue)}`)
    console.log(`    Text: "${textValue}"`)
    console.log(`    Checked: ${isChecked}`)
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    if (id === 8) { // –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
      const teacherName = extractPersonName(rawValue)
      console.log(`    Person: "${teacherName}"`)
    }
    
    if (id === 5) { // –§–∏–ª–∏–∞–ª
      const branchName = extractBranchName(rawValue)
      console.log(`    Branch: "${branchName}"`)
    }
  }
  
  // –¢–µ—Å—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
  console.log('\nüéØ –¢–ï–°–¢ –í–´–°–û–ö–û–£–†–û–í–ù–ï–í–´–• –§–£–ù–ö–¶–ò–ô:')
  console.log(`  –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: "${extractTeacher(fields, 8)}"`)
  console.log(`  –§–∏–ª–∏–∞–ª: "${extractBranch(fields, 5)}"`)
  console.log(`  –£—á–∏—Ç—Å—è: ${isStudying(fields, 64)}`)
}

function testForm792300() {
  console.log('\n' + '='.repeat(60))
  console.log('üß™ –¢–ï–°–¢ –§–û–†–ú–´ 792300 (–Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç)')
  console.log('='.repeat(60))
  
  const taskData = loadTaskData(792300)
  if (!taskData) return
  
  const fields: PyrusField[] = taskData.fields
  console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª–µ–π: ${fields.length}`)
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è
  const fieldTests = {
    142: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
    226: '–§–∏–ª–∏–∞–ª',
    187: '–£–ß–ò–¢–°–Ø',
    228: '–°—Ç–∞—Ç—É—Å PE',
    183: '–ü—Ä–∏—à–µ–ª –Ω–∞ 1-–µ –∑–∞–Ω—è—Ç–∏–µ?',
    198: '–ü—Ä–∏—à–µ–ª –Ω–∞ 2-–µ –∑–∞–Ω—è—Ç–∏–µ?'
  }
  
  console.log('\nüîç –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ü–û–õ–ï–ô:')
  for (const [fieldId, fieldName] of Object.entries(fieldTests)) {
    const id = parseInt(fieldId, 10)
    const rawValue = getFieldValue(fields, id)
    const textValue = extractTextValue(rawValue)
    const isChecked = isCheckboxChecked(rawValue)
    
    console.log(`\n  ID:${id.toString().padStart(3)} ${fieldName}`)
    console.log(`    Raw: ${JSON.stringify(rawValue)}`)
    console.log(`    Text: "${textValue}"`)
    console.log(`    Checked: ${isChecked}`)
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    if (id === 142) { // –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
      const teacherName = extractPersonName(rawValue)
      console.log(`    Person: "${teacherName}"`)
    }
    
    if (id === 226) { // –§–∏–ª–∏–∞–ª
      const branchName = extractBranchName(rawValue)
      console.log(`    Branch: "${branchName}"`)
    }
  }
  
  // –¢–µ—Å—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
  console.log('\nüéØ –¢–ï–°–¢ –í–´–°–û–ö–û–£–†–û–í–ù–ï–í–´–• –§–£–ù–ö–¶–ò–ô:')
  console.log(`  –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: "${extractTeacher(fields, 142)}"`)
  console.log(`  –§–∏–ª–∏–∞–ª: "${extractBranch(fields, 226)}"`)
  console.log(`  –£—á–∏—Ç—Å—è: ${isStudying(fields, 187)}`)
}

async function main() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ü–û–õ–ï–ô PYRUS')
  
  try {
    testForm2304918()
    testForm792300()
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error instanceof Error ? error.message : String(error))
  }
}

main()
