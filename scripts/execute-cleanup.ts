/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—ç—Ç–∞–ø–Ω–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */

import fs from 'fs'
import path from 'path'
import { execSync } from 'child_process'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

interface CleanupPhase {
  name: string
  description: string
  files: string[]
  directories: string[]
  validations: string[]
  safetyChecks: string[]
}

interface CleanupConfig {
  phases: CleanupPhase[]
  backupEnabled: boolean
  dryRun: boolean
  skipValidation: boolean
}

class CleanupExecutor {
  private config: CleanupConfig
  private projectRoot: string
  private backupDir: string

  constructor(config: CleanupConfig) {
    this.config = config
    this.projectRoot = path.resolve(__dirname, '..')
    this.backupDir = path.join(this.projectRoot, '.cleanup-backups')
  }

  async executeCleanup(): Promise<void> {
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ—á–∏—â–µ–Ω–∏—è...')
    
    if (this.config.backupEnabled) {
      await this.createBackup()
    }

    for (const [index, phase] of this.config.phases.entries()) {
      console.log(`\nüìã –§–ê–ó–ê ${index + 1}: ${phase.name}`)
      console.log(`üìù ${phase.description}`)
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      if (!this.config.skipValidation) {
        const safetyResult = await this.runSafetyChecks(phase)
        if (!safetyResult) {
          console.error(`‚ùå –§–∞–∑–∞ ${index + 1} –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏`)
          return
        }
      }

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∞–∑—ã
      await this.executePhase(phase)
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      if (!this.config.skipValidation) {
        const validationResult = await this.runValidations(phase)
        if (!validationResult) {
          console.error(`‚ùå –§–∞–∑–∞ ${index + 1} –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`)
          await this.rollbackPhase(phase)
          return
        }
      }

      console.log(`‚úÖ –§–∞–∑–∞ ${index + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
    }

    console.log('\nüéâ –û—á–∏—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
    await this.generateReport()
  }

  private async createBackup(): Promise<void> {
    console.log('üíæ –°–æ–∑–¥–∞–µ–º backup –ø–µ—Ä–µ–¥ –æ—á–∏—â–µ–Ω–∏–µ–º...')
    
    if (!fs.existsSync(this.backupDir)) {
      fs.mkdirSync(this.backupDir, { recursive: true })
    }

    const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
    const backupFile = path.join(this.backupDir, `cleanup-backup-${timestamp}.tar.gz`)

    try {
      execSync(`tar -czf "${backupFile}" app/ hooks/ lib/ supabase/migrations/ scripts/`, {
        cwd: this.projectRoot,
        stdio: 'inherit'
      })
      console.log(`‚úÖ Backup —Å–æ–∑–¥–∞–Ω: ${backupFile}`)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup:', error)
      throw error
    }
  }

  private async runSafetyChecks(phase: CleanupPhase): Promise<boolean> {
    console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...')
    
    for (const check of phase.safetyChecks) {
      try {
        const result = await this.runCommand(check)
        if (result.exitCode !== 0) {
          console.error(`‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: ${check}`)
          return false
        }
        console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞: ${check}`)
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${check}`, error)
        return false
      }
    }

    return true
  }

  private async executePhase(phase: CleanupPhase): Promise<void> {
    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...`)

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    for (const file of phase.files) {
      const filePath = path.join(this.projectRoot, file)
      if (fs.existsSync(filePath)) {
        if (this.config.dryRun) {
          console.log(`[DRY RUN] –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: ${file}`)
        } else {
          fs.unlinkSync(filePath)
          console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: ${file}`)
        }
      } else {
        console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file}`)
      }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    for (const dir of phase.directories) {
      const dirPath = path.join(this.projectRoot, dir)
      if (fs.existsSync(dirPath)) {
        if (this.config.dryRun) {
          console.log(`[DRY RUN] –£–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${dir}`)
        } else {
          fs.rmSync(dirPath, { recursive: true, force: true })
          console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`)
        }
      } else {
        console.log(`‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${dir}`)
      }
    }
  }

  private async runValidations(phase: CleanupPhase): Promise<boolean> {
    console.log('‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è...')
    
    for (const validation of phase.validations) {
      try {
        const result = await this.runCommand(validation)
        if (result.exitCode !== 0) {
          console.error(`‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: ${validation}`)
          return false
        }
        console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞: ${validation}`)
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validation}`, error)
        return false
      }
    }

    return true
  }

  private async runCommand(command: string): Promise<{ exitCode: number; output: string }> {
    try {
      const output = execSync(command, {
        cwd: this.projectRoot,
        encoding: 'utf-8',
        timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      })
      return { exitCode: 0, output }
    } catch (error: any) {
      return { exitCode: error.status || 1, output: error.stdout || error.message }
    }
  }

  private async rollbackPhase(phase: CleanupPhase): Promise<void> {
    console.log(`üîÑ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–∑—É: ${phase.name}`)
    
    // –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π backup –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    const backups = fs.readdirSync(this.backupDir)
      .filter(f => f.startsWith('cleanup-backup-'))
      .sort()
      .reverse()

    if (backups.length > 0) {
      const latestBackup = path.join(this.backupDir, backups[0])
      try {
        execSync(`tar -xzf "${latestBackup}"`, {
          cwd: this.projectRoot,
          stdio: 'inherit'
        })
        console.log('‚úÖ Rollback –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ rollback:', error)
      }
    }
  }

  private async generateReport(): Promise<void> {
    const reportPath = path.join(this.projectRoot, 'CLEANUP_REPORT.md')
    const timestamp = new Date().toISOString()
    
    let report = `# –û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—á–∏—â–µ–Ω–∏—è\n\n`
    report += `**–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** ${timestamp}\n`
    report += `**–†–µ–∂–∏–º:** ${this.config.dryRun ? 'DRY RUN' : '–†–ï–ê–õ–¨–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï'}\n\n`

    report += `## –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–∑—ã\n\n`
    for (const [index, phase] of this.config.phases.entries()) {
      report += `### –§–∞–∑–∞ ${index + 1}: ${phase.name}\n`
      report += `${phase.description}\n\n`
      
      report += `**–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:**\n`
      for (const file of phase.files) {
        report += `- \`${file}\`\n`
      }
      
      report += `**–£–¥–∞–ª–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:**\n`
      for (const dir of phase.directories) {
        report += `- \`${dir}\`\n`
      }
      
      report += `\n`
    }

    fs.writeFileSync(reportPath, report)
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`)
  }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—á–∏—â–µ–Ω–∏—è
const cleanupConfig: CleanupConfig = {
  backupEnabled: true,
  dryRun: process.argv.includes('--dry-run'),
  skipValidation: process.argv.includes('--skip-validation'),
  phases: [
    {
      name: '–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤',
      description: '–£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã',
      files: [
        'app/api/system/sync-users/manual/route.ts'
      ],
      directories: [
        'app/api/system/sync-users/manual'
      ],
      safetyChecks: [
        'npm run lint',
        'npm run build'
      ],
      validations: [
        'npm run test',
        'npm run build'
      ]
    },
    {
      name: '–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤',
      description: '–£–¥–∞–ª—è–µ–º backup —Ñ–∞–π–ª—ã –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã',
      files: [
        'app/system/configuration/page.tsx.backup',
        'app/teacher/[id]/page 2.tsx',
        'app/teacher/[id]/page-new.tsx', 
        'package 2.json',
        'server.log'
      ],
      directories: [],
      safetyChecks: [
        'git status --porcelain | wc -l' // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ—Ç uncommitted changes
      ],
      validations: [
        'npm run build'
      ]
    },
    {
      name: '–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π',
      description: '–£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã',
      files: [
        'supabase/migrations/20250915T150000_fix_branch_architecture.sql',
        'supabase/migrations/20250915T150001_fix_branch_architecture_corrected.sql',
        'supabase/migrations/20250915T160000_comprehensive_architecture_analysis.sql',
        'supabase/migrations/20250915T160001_comprehensive_analysis_fixed.sql',
        'supabase/migrations/20250915T160002_simple_analysis.sql',
        'supabase/migrations/20250915T160003_step_by_step_analysis.sql',
        'supabase/migrations/20250915T170000_fix_duplicate_current_scores.sql',
        'supabase/migrations/20250915T180000_fix_recompute_function.sql',
        'supabase/migrations/20250915T190000_final_cleanup_duplicates.sql'
      ],
      directories: [],
      safetyChecks: [
        'echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ 3+ –º–µ—Å—è—Ü–∞"'
      ],
      validations: [
        'npm run db:check'
      ]
    },
    {
      name: '–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤',
      description: '–£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞',
      files: [
        'scripts/add-avatars-to-existing-users.js',
        'scripts/apply-fixes.js',
        'scripts/check-gravatar.js',
        'scripts/cleanup-final.js',
        'scripts/create-views.js',
        'scripts/fix-database-integrity.ts',
        'scripts/fix-info-avatar.js',
        'scripts/quick-db-check.js',
        'scripts/run-all-tests.js',
        'scripts/test-avatars.js',
        'scripts/test-db-migration.js',
        'scripts/test-final-integration.js',
        'scripts/test-pyrus-connection.js',
        'scripts/test-pyrus-members.js',
        'scripts/test-role-mapping.js',
        'scripts/test-simplified-sync.js',
        'scripts/test-sync-endpoint.js',
        'scripts/test-sync-logic.js',
        'scripts/try-all-avatar-services.js',
        'scripts/update-all-avatars-with-gravatar-check.js',
        'scripts/pyrus-members-sample.json',
        'scripts/simplified-sync-simulation.json',
        'scripts/sync-simulation.json',
        'scripts/final-integration-report.json',
        'scripts/sync-endpoint-test-report.json',
        'scripts/test-report.json',
        'scripts/role-mapping.json'
      ],
      directories: [],
      safetyChecks: [
        'npm run lint'
      ],
      validations: [
        'npm run build'
      ]
    },
    {
      name: '–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤',
      description: '–£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ baseline —Ç–µ—Å—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑',
      files: [
        'tests/integration/api-baseline.test.ts',
        'tests/baseline-results.json',
        'analysis-results.json',
        'REFACTORING_ANALYSIS.md'
      ],
      directories: [],
      safetyChecks: [
        'npm run test'
      ],
      validations: [
        'npm run test'
      ]
    }
  ]
}

// –ó–∞–ø—É—Å–∫ –æ—á–∏—â–µ–Ω–∏—è
async function main() {
  try {
    console.log('üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ—á–∏—â–µ–Ω–∏—è')
    console.log('=====================================\n')
    
    if (cleanupConfig.dryRun) {
      console.log('üîç –†–ï–ñ–ò–ú: DRY RUN (—Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)')
    } else {
      console.log('‚ö†Ô∏è  –†–ï–ñ–ò–ú: –†–ï–ê–õ–¨–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï (—Ñ–∞–π–ª—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!)')
    }
    
    const executor = new CleanupExecutor(cleanupConfig)
    await executor.executeCleanup()
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω–∏—è:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main()
}

export { CleanupExecutor }
export type { CleanupConfig }
