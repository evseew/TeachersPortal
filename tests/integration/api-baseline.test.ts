/**
 * Baseline –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 * –¶–µ–ª—å: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º
 */

import { describe, test, expect, beforeAll } from '@jest/globals'

// –¢–∏–ø—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
interface ApiTestCase {
  endpoint: string
  method: 'GET' | 'POST' | 'PATCH' | 'DELETE'
  headers?: Record<string, string>
  body?: any
  expectedStatus: number[]
  description: string
}

// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö API
const API_TEST_CASES: ApiTestCase[] = [
  {
    endpoint: '/api/leaderboard?type=teacher_overall',
    method: 'GET',
    expectedStatus: [200],
    description: 'Teacher leaderboard –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
  },
  {
    endpoint: '/api/leaderboard?type=branch_overall', 
    method: 'GET',
    expectedStatus: [200],
    description: 'Branch leaderboard –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
  },
  {
    endpoint: '/api/metrics',
    method: 'GET',
    expectedStatus: [200],
    description: 'Metrics API —Ä–∞–±–æ—Ç–∞–µ—Ç'
  },
  {
    endpoint: '/api/system/users',
    method: 'GET',
    expectedStatus: [200, 401, 403], // –ú–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    description: 'Users API –¥–æ—Å—Ç—É–ø–µ–Ω'
  },
  {
    endpoint: '/api/system/branches',
    method: 'GET', 
    expectedStatus: [200, 401, 403],
    description: 'Branches API –¥–æ—Å—Ç—É–ø–µ–Ω'
  },
  {
    endpoint: '/api/system/sync-users',
    method: 'POST',
    expectedStatus: [200, 401, 403, 500], // –ú–æ–∂–µ—Ç –ø–∞–¥–∞—Ç—å –±–µ–∑ Pyrus
    description: 'User sync API –æ—Ç–≤–µ—á–∞–µ—Ç'
  },
  {
    endpoint: '/api/system/sync-leaderboard',
    method: 'POST', 
    expectedStatus: [200, 401, 403],
    description: 'Leaderboard sync API –æ—Ç–≤–µ—á–∞–µ—Ç'
  },
  {
    endpoint: '/api/system/recompute-scores',
    method: 'POST',
    expectedStatus: [200, 401, 403],
    description: 'Score recomputation API –æ—Ç–≤–µ—á–∞–µ—Ç'
  }
]

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è baseline —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
let baselineResults: Record<string, any> = {}

describe('API Baseline Tests', () => {
  beforeAll(async () => {
    console.log('üß™ –ó–∞–ø—É—Å–∫ baseline —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API...')
  })

  test.each(API_TEST_CASES)(
    '$description',
    async ({ endpoint, method, headers, body, expectedStatus, description }) => {
      const startTime = Date.now()
      
      try {
        const response = await fetch(`http://localhost:3000${endpoint}`, {
          method,
          headers: {
            'Content-Type': 'application/json',
            ...headers
          },
          body: body ? JSON.stringify(body) : undefined
        })

        const duration = Date.now() - startTime
        const data = await response.json().catch(() => null)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º baseline –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
        baselineResults[endpoint] = {
          status: response.status,
          duration,
          dataStructure: data ? Object.keys(data) : null,
          timestamp: new Date().toISOString()
        }

        expect(expectedStatus).toContain(response.status)
        console.log(`‚úÖ ${endpoint} - Status: ${response.status}, Duration: ${duration}ms`)
        
      } catch (error) {
        console.error(`‚ùå ${endpoint} - Error:`, error)
        
        // –î–ª—è baseline —Ç–µ—Å—Ç–æ–≤ –º—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–∂–µ –æ—à–∏–±–∫–∏
        baselineResults[endpoint] = {
          error: error instanceof Error ? error.message : 'Unknown error',
          timestamp: new Date().toISOString()
        }
        
        // –ù–µ failing —Ç–µ—Å—Ç, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        expect(true).toBe(true)
      }
    }
  )

  afterAll(async () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º baseline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const fs = require('fs')
    const path = require('path')
    
    const resultsPath = path.join(__dirname, '../baseline-results.json')
    fs.writeFileSync(resultsPath, JSON.stringify(baselineResults, null, 2))
    
    console.log('üìä Baseline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:', resultsPath)
  })
})

// –¢–µ—Å—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
describe('Data Structure Validation', () => {
  test('Teacher leaderboard —Å—Ç—Ä—É–∫—Ç—É—Ä–∞', async () => {
    try {
      const response = await fetch('http://localhost:3000/api/leaderboard?type=teacher_overall')
      if (response.ok) {
        const data = await response.json()
        
        if (Array.isArray(data) && data.length > 0) {
          const firstItem = data[0]
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
          expect(firstItem).toHaveProperty('teacher_id')
          expect(firstItem).toHaveProperty('name')
          expect(firstItem).toHaveProperty('score')
          expect(firstItem).toHaveProperty('rank')
          
          console.log('‚úÖ Teacher leaderboard —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞')
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Teacher leaderboard –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã')
    }
  })

  test('Branch leaderboard —Å—Ç—Ä—É–∫—Ç—É—Ä–∞', async () => {
    try {
      const response = await fetch('http://localhost:3000/api/leaderboard?type=branch_overall')
      if (response.ok) {
        const data = await response.json()
        
        if (Array.isArray(data) && data.length > 0) {
          const firstItem = data[0]
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
          expect(firstItem).toHaveProperty('branch_id')
          expect(firstItem).toHaveProperty('branch_name')
          expect(firstItem).toHaveProperty('score')
          expect(firstItem).toHaveProperty('rank')
          
          console.log('‚úÖ Branch leaderboard —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞')
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Branch leaderboard –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã')
    }
  })
})
